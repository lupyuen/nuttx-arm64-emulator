
../apps/bin/hello:     file format elf64-littleaarch64

SYMBOL TABLE:
0000000000000000 l    d  .text	0000000000000000 .text
00000000000014fc l    d  .rodata	0000000000000000 .rodata
00000000000015f0 l    d  .bss	0000000000000000 .bss
00000000000013e8 g     F .text	0000000000000020 clock_gettime
00000000000011b0 g     F .text	0000000000000024 nxsem_get_value
0000000000001440 g     F .text	0000000000000014 nx_pthread_exit
0000000000000688 g     F .text	0000000000000034 lib_fflush
0000000000001454 g     F .text	0000000000000024 nxsem_clockwait
0000000000000a74 g     F .text	0000000000000018 task_get_info
0000000000000b40 g     F .text	000000000000002c nxmutex_is_locked
0000000000000de4 g     F .text	0000000000000008 nxrmutex_get_holder
00000000000015f0 g       .dtors	0000000000000000 _edtors
0000000000000d98 g     F .text	0000000000000010 nxmutex_restorelock
000000000000137c g     F .text	0000000000000024 pthread_exit
0000000000000984 g     F .text	00000000000000a0 atexit_call_exitfuncs
0000000000001408 g     F .text	0000000000000014 gettid
0000000000001020 g     F .text	0000000000000034 nxrmutex_restorelock
00000000000015f0 g       .dtors	0000000000000000 _sdtors
0000000000000a8c g     F .text	000000000000002c __errno
00000000000014fc g       .text	0000000000000000 _etext
00000000000015f0 g       .bss	0000000000000000 _sbss
00000000000005d8 g     F .text	00000000000000b0 lib_fflush_unlocked
0000000000001054 g     F .text	0000000000000078 task_setcancelstate
0000000000000b38 g     F .text	0000000000000008 nxmutex_get_holder
0000000000000000 g     F .text	000000000000016c memcpy
00000000000010cc g     F .text	000000000000003c nxsem_init
00000000000003a8 g     F .text	000000000000008c puts
00000000000014fc g       .rodata	0000000000000000 _srodata
000000000000089c g     F .text	0000000000000030 quick_exit
00000000000013ac g     F .text	0000000000000028 _assert
0000000000000dac g     F .text	0000000000000008 nxrmutex_init
0000000000001478 g     F .text	0000000000000018 nxsem_destroy
00000000000015e8  w    O .data	0000000000000008 __dso_handle
0000000000000bcc g     F .text	0000000000000030 nxmutex_trylock
00000000000015e8 g       .data	0000000000000000 _sdata
0000000000000b6c g     F .text	0000000000000060 nxmutex_lock
0000000000000fd0 g     F .text	0000000000000050 nxrmutex_breaklock
0000000000001234 g     F .text	000000000000003c fflush
0000000000000afc g     F .text	0000000000000020 nxmutex_destroy
000000000000141c g     F .text	0000000000000024 lseek
00000000000008cc g     F .text	0000000000000008 _Exit
00000000000013a0 g     F .text	000000000000000c abort
0000000000000ea0 g     F .text	0000000000000070 nxrmutex_clocklock
000000000000081c g     F .text	0000000000000008 ftrylockfile
0000000000000dec g     F .text	0000000000000004 nxrmutex_is_locked
00000000000015f4 g       .bss	0000000000000000 _ebss
00000000000006bc g     F .text	000000000000007c lib_rdflush_unlocked
00000000000015f4 g       *ABS*	0000000000000000 _etbss
00000000000014d8 g     F .text	0000000000000024 write
0000000000000738 g     F .text	000000000000009c fputs_unlocked
0000000000000f78 g     F .text	0000000000000058 nxrmutex_unlock
0000000000000328 g     F .text	0000000000000064 __start
0000000000000ab8 g     F .text	0000000000000044 nxmutex_init
0000000000000ce4 g     F .text	0000000000000070 nxmutex_unlock
0000000000001108 g     F .text	0000000000000034 sem_init
0000000000000c64 g     F .text	0000000000000080 nxmutex_timedlock
0000000000001490 g     F .text	0000000000000018 nxsem_post
0000000000000824 g     F .text	0000000000000008 funlockfile
0000000000000a4c g     F .text	0000000000000014 on_exit
0000000000000d54 g     F .text	0000000000000044 nxmutex_breaklock
0000000000000a60 g     F .text	0000000000000014 __cxa_atexit
00000000000014c0 g     F .text	0000000000000018 nxsem_wait
00000000000015f4 g       *ABS*	0000000000000000 _stbss
00000000000014a8 g     F .text	0000000000000018 nxsem_trywait
0000000000000a38 g     F .text	0000000000000014 at_quick_exit
0000000000000840 g     F .text	0000000000000024 lib_get_stream
0000000000001184 g     F .text	000000000000002c sem_setprotocol
0000000000000590 g     F .text	0000000000000048 lib_fwrite
000000000000082c g     F .text	0000000000000014 lib_get_streams
000000000000038c g     F .text	000000000000001c main
0000000000000da8 g     F .text	0000000000000004 nxmutex_set_protocol
0000000000000b1c g     F .text	000000000000001c nxmutex_is_hold
0000000000001270 g     F .text	0000000000000078 lib_flushall_unlocked
0000000000000f10 g     F .text	0000000000000068 nxrmutex_timedlock
00000000000008d4 g     F .text	00000000000000b0 atexit_register
0000000000000bfc g     F .text	0000000000000068 nxmutex_clocklock
0000000000000df0 g     F .text	0000000000000058 nxrmutex_lock
0000000000000a24 g     F .text	0000000000000014 atexit
0000000000000814 g     F .text	0000000000000008 flockfile
00000000000015f0 g       .ctors	0000000000000000 _sctors
00000000000011f8 g     F .text	000000000000003c fflush_unlocked
0000000000000db4 g     F .text	000000000000001c nxrmutex_destroy
00000000000015f0 g       .data	0000000000000000 _edata
0000000000000dd0 g     F .text	0000000000000004 nxrmutex_is_hold
0000000000000dd4 g     F .text	0000000000000010 nxrmutex_is_recursive
00000000000011d4 g     F .text	0000000000000024 sem_getvalue
000000000000113c g     F .text	0000000000000048 nxsem_set_protocol
0000000000000864 g     F .text	0000000000000038 exit
00000000000015f0 g       .ctors	0000000000000000 _ectors
00000000000015f4 g       *ABS*	0000000000000000 _stdata
00000000000012e8 g     F .text	0000000000000084 lib_flushall
00000000000013d4 g     F .text	0000000000000014 _exit
0000000000000e48 g     F .text	0000000000000058 nxrmutex_trylock
0000000000000000 g       .text	0000000000000000 _stext
0000000000000180 g     F .text	0000000000000140 strlen
000000000000136c g     F .text	0000000000000010 __assert
00000000000007d4 g     F .text	0000000000000040 fputs
0000000000000434 g     F .text	000000000000015c lib_fwrite_unlocked
00000000000015f4 g       *ABS*	0000000000000000 _etdata
00000000000015e5 g       .rodata	0000000000000000 _erodata



Disassembly of section .text:

0000000000000000 <memcpy>:
memcpy():
       0:	f9800020 	prfm	pldl1keep, [x1]
       4:	8b020024 	add	x4, x1, x2
       8:	8b020005 	add	x5, x0, x2
       c:	f100405f 	cmp	x2, #0x10
      10:	54000209 	b.ls	50 <memcpy+0x50>  // b.plast
      14:	f101805f 	cmp	x2, #0x60
      18:	54000648 	b.hi	e0 <memcpy+0xe0>  // b.pmore
      1c:	d1000449 	sub	x9, x2, #0x1
      20:	a9401c26 	ldp	x6, x7, [x1]
      24:	37300469 	tbnz	w9, #6, b0 <memcpy+0xb0>
      28:	a97f348c 	ldp	x12, x13, [x4, #-16]
      2c:	362800a9 	tbz	w9, #5, 40 <memcpy+0x40>
      30:	a9412428 	ldp	x8, x9, [x1, #16]
      34:	a97e2c8a 	ldp	x10, x11, [x4, #-32]
      38:	a9012408 	stp	x8, x9, [x0, #16]
      3c:	a93e2caa 	stp	x10, x11, [x5, #-32]
      40:	a9001c06 	stp	x6, x7, [x0]
      44:	a93f34ac 	stp	x12, x13, [x5, #-16]
      48:	d65f03c0 	ret
      4c:	d503201f 	nop
      50:	f100205f 	cmp	x2, #0x8
      54:	540000e3 	b.cc	70 <memcpy+0x70>  // b.lo, b.ul, b.last
      58:	f9400026 	ldr	x6, [x1]
      5c:	f85f8087 	ldur	x7, [x4, #-8]
      60:	f9000006 	str	x6, [x0]
      64:	f81f80a7 	stur	x7, [x5, #-8]
      68:	d65f03c0 	ret
      6c:	d503201f 	nop
      70:	361000c2 	tbz	w2, #2, 88 <memcpy+0x88>
      74:	b9400026 	ldr	w6, [x1]
      78:	b85fc087 	ldur	w7, [x4, #-4]
      7c:	b9000006 	str	w6, [x0]
      80:	b81fc0a7 	stur	w7, [x5, #-4]
      84:	d65f03c0 	ret
      88:	b4000102 	cbz	x2, a8 <memcpy+0xa8>
      8c:	d341fc49 	lsr	x9, x2, #1
      90:	39400026 	ldrb	w6, [x1]
      94:	385ff087 	ldurb	w7, [x4, #-1]
      98:	38696828 	ldrb	w8, [x1, x9]
      9c:	39000006 	strb	w6, [x0]
      a0:	38296808 	strb	w8, [x0, x9]
      a4:	381ff0a7 	sturb	w7, [x5, #-1]
      a8:	d65f03c0 	ret
      ac:	d503201f 	nop
      b0:	a9412428 	ldp	x8, x9, [x1, #16]
      b4:	a9422c2a 	ldp	x10, x11, [x1, #32]
      b8:	a943342c 	ldp	x12, x13, [x1, #48]
      bc:	a97e0881 	ldp	x1, x2, [x4, #-32]
      c0:	a97f0c84 	ldp	x4, x3, [x4, #-16]
      c4:	a9001c06 	stp	x6, x7, [x0]
      c8:	a9012408 	stp	x8, x9, [x0, #16]
      cc:	a9022c0a 	stp	x10, x11, [x0, #32]
      d0:	a903340c 	stp	x12, x13, [x0, #48]
      d4:	a93e08a1 	stp	x1, x2, [x5, #-32]
      d8:	a93f0ca4 	stp	x4, x3, [x5, #-16]
      dc:	d65f03c0 	ret
      e0:	92400c09 	and	x9, x0, #0xf
      e4:	927cec03 	and	x3, x0, #0xfffffffffffffff0
      e8:	a940342c 	ldp	x12, x13, [x1]
      ec:	cb090021 	sub	x1, x1, x9
      f0:	8b090042 	add	x2, x2, x9
      f4:	a9411c26 	ldp	x6, x7, [x1, #16]
      f8:	a900340c 	stp	x12, x13, [x0]
      fc:	a9422428 	ldp	x8, x9, [x1, #32]
     100:	a9432c2a 	ldp	x10, x11, [x1, #48]
     104:	a9c4342c 	ldp	x12, x13, [x1, #64]!
     108:	f1024042 	subs	x2, x2, #0x90
     10c:	54000169 	b.ls	138 <memcpy+0x138>  // b.plast
     110:	a9011c66 	stp	x6, x7, [x3, #16]
     114:	a9411c26 	ldp	x6, x7, [x1, #16]
     118:	a9022468 	stp	x8, x9, [x3, #32]
     11c:	a9422428 	ldp	x8, x9, [x1, #32]
     120:	a9032c6a 	stp	x10, x11, [x3, #48]
     124:	a9432c2a 	ldp	x10, x11, [x1, #48]
     128:	a984346c 	stp	x12, x13, [x3, #64]!
     12c:	a9c4342c 	ldp	x12, x13, [x1, #64]!
     130:	f1010042 	subs	x2, x2, #0x40
     134:	54fffee8 	b.hi	110 <memcpy+0x110>  // b.pmore
     138:	a97c0881 	ldp	x1, x2, [x4, #-64]
     13c:	a9011c66 	stp	x6, x7, [x3, #16]
     140:	a97d1c86 	ldp	x6, x7, [x4, #-48]
     144:	a9022468 	stp	x8, x9, [x3, #32]
     148:	a97e2488 	ldp	x8, x9, [x4, #-32]
     14c:	a9032c6a 	stp	x10, x11, [x3, #48]
     150:	a97f2c8a 	ldp	x10, x11, [x4, #-16]
     154:	a904346c 	stp	x12, x13, [x3, #64]
     158:	a93c08a1 	stp	x1, x2, [x5, #-64]
     15c:	a93d1ca6 	stp	x6, x7, [x5, #-48]
     160:	a93e24a8 	stp	x8, x9, [x5, #-32]
     164:	a93f2caa 	stp	x10, x11, [x5, #-16]
     168:	d65f03c0 	ret
	...

0000000000000180 <strlen>:
strlen():
     180:	92402c04 	and	x4, x0, #0xfff
     184:	b200c3e8 	mov	x8, #0x101010101010101     	// #72340172838076673
     188:	f13fc09f 	cmp	x4, #0xff0
     18c:	5400082c 	b.gt	290 <strlen+0x110>
     190:	a9400c02 	ldp	x2, x3, [x0]
     194:	cb080044 	sub	x4, x2, x8
     198:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
     19c:	cb080066 	sub	x6, x3, x8
     1a0:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
     1a4:	ea250084 	bics	x4, x4, x5
     1a8:	8a2700c5 	bic	x5, x6, x7
     1ac:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq	// eq = none
     1b0:	54000100 	b.eq	1d0 <strlen+0x50>  // b.none
     1b4:	9a853084 	csel	x4, x4, x5, cc	// cc = lo, ul, last
     1b8:	d2800100 	mov	x0, #0x8                   	// #8
     1bc:	dac00c84 	rev	x4, x4
     1c0:	dac01084 	clz	x4, x4
     1c4:	9a8033e0 	csel	x0, xzr, x0, cc	// cc = lo, ul, last
     1c8:	8b440c00 	add	x0, x0, x4, lsr #3
     1cc:	d65f03c0 	ret
     1d0:	927cec01 	and	x1, x0, #0xfffffffffffffff0
     1d4:	d1004021 	sub	x1, x1, #0x10
     1d8:	a9c20c22 	ldp	x2, x3, [x1, #32]!
     1dc:	cb080044 	sub	x4, x2, x8
     1e0:	cb080066 	sub	x6, x3, x8
     1e4:	aa060085 	orr	x5, x4, x6
     1e8:	ea081cbf 	tst	x5, x8, lsl #7
     1ec:	54000101 	b.ne	20c <strlen+0x8c>  // b.any
     1f0:	a9410c22 	ldp	x2, x3, [x1, #16]
     1f4:	cb080044 	sub	x4, x2, x8
     1f8:	cb080066 	sub	x6, x3, x8
     1fc:	aa060085 	orr	x5, x4, x6
     200:	ea081cbf 	tst	x5, x8, lsl #7
     204:	54fffea0 	b.eq	1d8 <strlen+0x58>  // b.none
     208:	91004021 	add	x1, x1, #0x10
     20c:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
     210:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
     214:	ea250084 	bics	x4, x4, x5
     218:	8a2700c5 	bic	x5, x6, x7
     21c:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq	// eq = none
     220:	54000120 	b.eq	244 <strlen+0xc4>  // b.none
     224:	9a853084 	csel	x4, x4, x5, cc	// cc = lo, ul, last
     228:	cb000020 	sub	x0, x1, x0
     22c:	dac00c84 	rev	x4, x4
     230:	91002005 	add	x5, x0, #0x8
     234:	dac01084 	clz	x4, x4
     238:	9a853000 	csel	x0, x0, x5, cc	// cc = lo, ul, last
     23c:	8b440c00 	add	x0, x0, x4, lsr #3
     240:	d65f03c0 	ret
     244:	a9c10c22 	ldp	x2, x3, [x1, #16]!
     248:	cb080044 	sub	x4, x2, x8
     24c:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
     250:	cb080066 	sub	x6, x3, x8
     254:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
     258:	ea250084 	bics	x4, x4, x5
     25c:	8a2700c5 	bic	x5, x6, x7
     260:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq	// eq = none
     264:	54fffe01 	b.ne	224 <strlen+0xa4>  // b.any
     268:	a9c10c22 	ldp	x2, x3, [x1, #16]!
     26c:	cb080044 	sub	x4, x2, x8
     270:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
     274:	cb080066 	sub	x6, x3, x8
     278:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
     27c:	ea250084 	bics	x4, x4, x5
     280:	8a2700c5 	bic	x5, x6, x7
     284:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq	// eq = none
     288:	54fffde0 	b.eq	244 <strlen+0xc4>  // b.none
     28c:	17ffffe6 	b	224 <strlen+0xa4>
     290:	927cec01 	and	x1, x0, #0xfffffffffffffff0
     294:	a9400c22 	ldp	x2, x3, [x1]
     298:	d37df004 	lsl	x4, x0, #3
     29c:	92800007 	mov	x7, #0xffffffffffffffff    	// #-1
     2a0:	9ac420e4 	lsl	x4, x7, x4
     2a4:	b201c084 	orr	x4, x4, #0x8080808080808080
     2a8:	aa240042 	orn	x2, x2, x4
     2ac:	aa240065 	orn	x5, x3, x4
     2b0:	f27d001f 	tst	x0, #0x8
     2b4:	9a870042 	csel	x2, x2, x7, eq	// eq = none
     2b8:	9a850063 	csel	x3, x3, x5, eq	// eq = none
     2bc:	17ffffc8 	b	1dc <strlen+0x5c>
     2c0:	d10043ff 	sub	sp, sp, #0x10
     2c4:	f90003fe 	str	x30, [sp]
     2c8:	aa0003f0 	mov	x16, x0
     2cc:	aa0103e0 	mov	x0, x1
     2d0:	aa0203e1 	mov	x1, x2
     2d4:	aa0303e2 	mov	x2, x3
     2d8:	d63f0200 	blr	x16
     2dc:	f94003fe 	ldr	x30, [sp]
     2e0:	910043ff 	add	sp, sp, #0x10
     2e4:	d28000a0 	mov	x0, #0x5                   	// #5
     2e8:	d4000001 	svc	#0x0
     2ec:	d65f03c0 	ret
     2f0:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     2f4:	90000013 	adrp	x19, 15f0 <_ectors>	2f4: R_AARCH64_ADR_PREL_PG_HI21	_sdtors
     2f8:	91000273 	add	x19, x19, #0x0	2f8: R_AARCH64_ADD_ABS_LO12_NC	_sdtors
     2fc:	f9000bf4 	str	x20, [sp, #16]
     300:	90000014 	adrp	x20, 15f0 <_ectors>	300: R_AARCH64_ADR_PREL_PG_HI21	_edtors
     304:	91000294 	add	x20, x20, #0x0	304: R_AARCH64_ADD_ABS_LO12_NC	_edtors
     308:	eb14027f 	cmp	x19, x20
     30c:	54000081 	b.ne	31c <strlen+0x19c>  // b.any
     310:	f9400bf4 	ldr	x20, [sp, #16]
     314:	a8c24ffe 	ldp	x30, x19, [sp], #32
     318:	d65f03c0 	ret
     31c:	f8408660 	ldr	x0, [x19], #8
     320:	d63f0000 	blr	x0
     324:	17fffff9 	b	308 <strlen+0x188>

0000000000000328 <__start>:
__start():
     328:	a9bd4ffe 	stp	x30, x19, [sp, #-48]!
     32c:	90000013 	adrp	x19, 15f0 <_ectors>	32c: R_AARCH64_ADR_PREL_PG_HI21	_sctors
     330:	91000273 	add	x19, x19, #0x0	330: R_AARCH64_ADD_ABS_LO12_NC	_sctors
     334:	a90157f4 	stp	x20, x21, [sp, #16]
     338:	aa0103f5 	mov	x21, x1
     33c:	d2b80001 	mov	x1, #0xc0000000            	// #3221225472
     340:	f90013f6 	str	x22, [sp, #32]
     344:	90000016 	adrp	x22, 15f0 <_ectors>	344: R_AARCH64_ADR_PREL_PG_HI21	_ectors
     348:	910002d6 	add	x22, x22, #0x0	348: R_AARCH64_ADD_ABS_LO12_NC	_ectors
     34c:	2a0003f4 	mov	w20, w0
     350:	90000000 	adrp	x0, 0 <memcpy>	350: R_AARCH64_ADR_PREL_PG_HI21	.text+0x2c0
     354:	91000000 	add	x0, x0, #0x0	354: R_AARCH64_ADD_ABS_LO12_NC	.text+0x2c0
     358:	f9000020 	str	x0, [x1]
     35c:	eb16027f 	cmp	x19, x22
     360:	54000101 	b.ne	380 <__start+0x58>  // b.any
     364:	90000000 	adrp	x0, 0 <memcpy>	364: R_AARCH64_ADR_PREL_PG_HI21	.text+0x2f0
     368:	91000000 	add	x0, x0, #0x0	368: R_AARCH64_ADD_ABS_LO12_NC	.text+0x2f0
     36c:	94000000 	bl	a24 <atexit>	36c: R_AARCH64_CALL26	atexit
     370:	aa1503e1 	mov	x1, x21
     374:	2a1403e0 	mov	w0, w20
     378:	94000000 	bl	38c <main>	378: R_AARCH64_CALL26	main
     37c:	94000000 	bl	864 <exit>	37c: R_AARCH64_CALL26	exit
     380:	f8408660 	ldr	x0, [x19], #8
     384:	d63f0000 	blr	x0
     388:	17fffff5 	b	35c <__start+0x34>

000000000000038c <main>:
main():
     38c:	f81f0ffe 	str	x30, [sp, #-16]!
     390:	90000000 	adrp	x0, 14fc <_etext>	390: R_AARCH64_ADR_PREL_PG_HI21	.rodata
     394:	91000000 	add	x0, x0, #0x0	394: R_AARCH64_ADD_ABS_LO12_NC	.rodata
     398:	94000000 	bl	3a8 <puts>	398: R_AARCH64_CALL26	puts
     39c:	f84107fe 	ldr	x30, [sp], #16
     3a0:	52800000 	mov	w0, #0x0                   	// #0
     3a4:	d65f03c0 	ret

00000000000003a8 <puts>:
puts():
     3a8:	a9bd4ffe 	stp	x30, x19, [sp, #-48]!
     3ac:	aa0003f3 	mov	x19, x0
     3b0:	52800020 	mov	w0, #0x1                   	// #1
     3b4:	f9000bf4 	str	x20, [sp, #16]
     3b8:	94000000 	bl	840 <lib_get_stream>	3b8: R_AARCH64_CALL26	lib_get_stream
     3bc:	aa0003f4 	mov	x20, x0
     3c0:	94000000 	bl	814 <flockfile>	3c0: R_AARCH64_CALL26	flockfile
     3c4:	aa1403e1 	mov	x1, x20
     3c8:	aa1303e0 	mov	x0, x19
     3cc:	94000000 	bl	738 <fputs_unlocked>	3cc: R_AARCH64_CALL26	fputs_unlocked
     3d0:	37f80140 	tbnz	w0, #31, 3f8 <puts+0x50>
     3d4:	2a0003f3 	mov	w19, w0
     3d8:	52800140 	mov	w0, #0xa                   	// #10
     3dc:	aa1403e2 	mov	x2, x20
     3e0:	d2800021 	mov	x1, #0x1                   	// #1
     3e4:	3900bfe0 	strb	w0, [sp, #47]
     3e8:	9100bfe0 	add	x0, sp, #0x2f
     3ec:	94000000 	bl	434 <lib_fwrite_unlocked>	3ec: R_AARCH64_CALL26	lib_fwrite_unlocked
     3f0:	7100001f 	cmp	w0, #0x0
     3f4:	5400006c 	b.gt	400 <puts+0x58>
     3f8:	12800013 	mov	w19, #0xffffffff            	// #-1
     3fc:	14000007 	b	418 <puts+0x70>
     400:	3942ea80 	ldrb	w0, [x20, #186]
     404:	11000673 	add	w19, w19, #0x1
     408:	36100080 	tbz	w0, #2, 418 <puts+0x70>
     40c:	aa1403e0 	mov	x0, x20
     410:	94000000 	bl	5d8 <lib_fflush_unlocked>	410: R_AARCH64_CALL26	lib_fflush_unlocked
     414:	37ffff20 	tbnz	w0, #31, 3f8 <puts+0x50>
     418:	52800020 	mov	w0, #0x1                   	// #1
     41c:	94000000 	bl	840 <lib_get_stream>	41c: R_AARCH64_CALL26	lib_get_stream
     420:	94000000 	bl	824 <funlockfile>	420: R_AARCH64_CALL26	funlockfile
     424:	f9400bf4 	ldr	x20, [sp, #16]
     428:	2a1303e0 	mov	w0, w19
     42c:	a8c34ffe 	ldp	x30, x19, [sp], #48
     430:	d65f03c0 	ret

0000000000000434 <lib_fwrite_unlocked>:
lib_fwrite_unlocked():
     434:	a9bd4ffe 	stp	x30, x19, [sp, #-48]!
     438:	a90157f4 	stp	x20, x21, [sp, #16]
     43c:	f90013f6 	str	x22, [sp, #32]
     440:	b5000122 	cbnz	x2, 464 <lib_fwrite_unlocked+0x30>
     444:	94000000 	bl	a8c <__errno>	444: R_AARCH64_CALL26	__errno
     448:	52800121 	mov	w1, #0x9                   	// #9
     44c:	b9000001 	str	w1, [x0]
     450:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
     454:	f94013f6 	ldr	x22, [sp, #32]
     458:	a94157f4 	ldp	x20, x21, [sp, #16]
     45c:	a8c34ffe 	ldp	x30, x19, [sp], #48
     460:	d65f03c0 	ret
     464:	aa0003f6 	mov	x22, x0
     468:	79417040 	ldrh	w0, [x2, #184]
     46c:	aa0203f4 	mov	x20, x2
     470:	37080120 	tbnz	w0, #1, 494 <lib_fwrite_unlocked+0x60>
     474:	94000000 	bl	a8c <__errno>	474: R_AARCH64_CALL26	__errno
     478:	52800121 	mov	w1, #0x9                   	// #9
     47c:	b9000001 	str	w1, [x0]
     480:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
     484:	3942ea81 	ldrb	w1, [x20, #186]
     488:	321f0021 	orr	w1, w1, #0x2
     48c:	3902ea81 	strb	w1, [x20, #186]
     490:	17fffff1 	b	454 <lib_fwrite_unlocked+0x20>
     494:	f9402c40 	ldr	x0, [x2, #88]
     498:	aa0103f5 	mov	x21, x1
     49c:	b5000160 	cbnz	x0, 4c8 <lib_fwrite_unlocked+0x94>
     4a0:	f9401e83 	ldr	x3, [x20, #56]
     4a4:	aa0103e2 	mov	x2, x1
     4a8:	f9402a80 	ldr	x0, [x20, #80]
     4ac:	aa1603e1 	mov	x1, x22
     4b0:	b4000083 	cbz	x3, 4c0 <lib_fwrite_unlocked+0x8c>
     4b4:	d63f0060 	blr	x3
     4b8:	b6fffce0 	tbz	x0, #63, 454 <lib_fwrite_unlocked+0x20>
     4bc:	17fffff1 	b	480 <lib_fwrite_unlocked+0x4c>
     4c0:	94000000 	bl	14d8 <write>	4c0: R_AARCH64_CALL26	write
     4c4:	17fffffd 	b	4b8 <lib_fwrite_unlocked+0x84>
     4c8:	aa0203e0 	mov	x0, x2
     4cc:	94000000 	bl	6bc <lib_rdflush_unlocked>	4cc: R_AARCH64_CALL26	lib_rdflush_unlocked
     4d0:	37fffd80 	tbnz	w0, #31, 480 <lib_fwrite_unlocked+0x4c>
     4d4:	a9460293 	ldp	x19, x0, [x20, #96]
     4d8:	cb000273 	sub	x19, x19, x0
     4dc:	f101027f 	cmp	x19, #0x40
     4e0:	fa550262 	ccmp	x19, x21, #0x2, eq	// eq = none
     4e4:	540003a9 	b.ls	558 <lib_fwrite_unlocked+0x124>  // b.plast
     4e8:	eb15027f 	cmp	x19, x21
     4ec:	aa1603e1 	mov	x1, x22
     4f0:	9a959273 	csel	x19, x19, x21, ls	// ls = plast
     4f4:	aa1303e2 	mov	x2, x19
     4f8:	cb1302b5 	sub	x21, x21, x19
     4fc:	94000000 	bl	0 <memcpy>	4fc: R_AARCH64_CALL26	memcpy
     500:	a9460281 	ldp	x1, x0, [x20, #96]
     504:	8b130000 	add	x0, x0, x19
     508:	f9003680 	str	x0, [x20, #104]
     50c:	8b1302d3 	add	x19, x22, x19
     510:	eb01001f 	cmp	x0, x1
     514:	54000083 	b.cc	524 <lib_fwrite_unlocked+0xf0>  // b.lo, b.ul, b.last
     518:	aa1403e0 	mov	x0, x20
     51c:	94000000 	bl	5d8 <lib_fflush_unlocked>	51c: R_AARCH64_CALL26	lib_fflush_unlocked
     520:	37fffb00 	tbnz	w0, #31, 480 <lib_fwrite_unlocked+0x4c>
     524:	f100febf 	cmp	x21, #0x3f
     528:	54000209 	b.ls	568 <lib_fwrite_unlocked+0x134>  // b.plast
     52c:	f9401e83 	ldr	x3, [x20, #56]
     530:	aa1503e2 	mov	x2, x21
     534:	f9402a80 	ldr	x0, [x20, #80]
     538:	aa1303e1 	mov	x1, x19
     53c:	b4000123 	cbz	x3, 560 <lib_fwrite_unlocked+0x12c>
     540:	d63f0060 	blr	x3
     544:	b7fff9e0 	tbnz	x0, #63, 480 <lib_fwrite_unlocked+0x4c>
     548:	8b000273 	add	x19, x19, x0
     54c:	eb160260 	subs	x0, x19, x22
     550:	54fff825 	b.pl	454 <lib_fwrite_unlocked+0x20>  // b.nfrst
     554:	17ffffcc 	b	484 <lib_fwrite_unlocked+0x50>
     558:	aa1603f3 	mov	x19, x22
     55c:	17fffff2 	b	524 <lib_fwrite_unlocked+0xf0>
     560:	94000000 	bl	14d8 <write>	560: R_AARCH64_CALL26	write
     564:	17fffff8 	b	544 <lib_fwrite_unlocked+0x110>
     568:	b4ffff35 	cbz	x21, 54c <lib_fwrite_unlocked+0x118>
     56c:	f9403680 	ldr	x0, [x20, #104]
     570:	aa1303e1 	mov	x1, x19
     574:	aa1503e2 	mov	x2, x21
     578:	8b150273 	add	x19, x19, x21
     57c:	94000000 	bl	0 <memcpy>	57c: R_AARCH64_CALL26	memcpy
     580:	f9403680 	ldr	x0, [x20, #104]
     584:	8b150000 	add	x0, x0, x21
     588:	f9003680 	str	x0, [x20, #104]
     58c:	17fffff0 	b	54c <lib_fwrite_unlocked+0x118>

0000000000000590 <lib_fwrite>:
lib_fwrite():
     590:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     594:	aa0203f3 	mov	x19, x2
     598:	a90157f4 	stp	x20, x21, [sp, #16]
     59c:	aa0003f4 	mov	x20, x0
     5a0:	aa0103f5 	mov	x21, x1
     5a4:	aa0203e0 	mov	x0, x2
     5a8:	94000000 	bl	814 <flockfile>	5a8: R_AARCH64_CALL26	flockfile
     5ac:	aa1303e2 	mov	x2, x19
     5b0:	aa1503e1 	mov	x1, x21
     5b4:	aa1403e0 	mov	x0, x20
     5b8:	94000000 	bl	434 <lib_fwrite_unlocked>	5b8: R_AARCH64_CALL26	lib_fwrite_unlocked
     5bc:	aa0003f4 	mov	x20, x0
     5c0:	aa1303e0 	mov	x0, x19
     5c4:	94000000 	bl	824 <funlockfile>	5c4: R_AARCH64_CALL26	funlockfile
     5c8:	aa1403e0 	mov	x0, x20
     5cc:	a94157f4 	ldp	x20, x21, [sp, #16]
     5d0:	a8c24ffe 	ldp	x30, x19, [sp], #32
     5d4:	d65f03c0 	ret

00000000000005d8 <lib_fflush_unlocked>:
lib_fflush_unlocked():
     5d8:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     5dc:	aa0003f3 	mov	x19, x0
     5e0:	a90157f4 	stp	x20, x21, [sp, #16]
     5e4:	79417000 	ldrh	w0, [x0, #184]
     5e8:	360804c0 	tbz	w0, #1, 680 <lib_fflush_unlocked+0xa8>
     5ec:	f9402e75 	ldr	x21, [x19, #88]
     5f0:	b50000b5 	cbnz	x21, 604 <lib_fflush_unlocked+0x2c>
     5f4:	d2800000 	mov	x0, #0x0                   	// #0
     5f8:	a94157f4 	ldp	x20, x21, [sp, #16]
     5fc:	a8c24ffe 	ldp	x30, x19, [sp], #32
     600:	d65f03c0 	ret
     604:	f9403674 	ldr	x20, [x19, #104]
     608:	eb1402bf 	cmp	x21, x20
     60c:	54ffff40 	b.eq	5f4 <lib_fflush_unlocked+0x1c>  // b.none
     610:	f9403a60 	ldr	x0, [x19, #112]
     614:	eb0002bf 	cmp	x21, x0
     618:	54fffee1 	b.ne	5f4 <lib_fflush_unlocked+0x1c>  // b.any
     61c:	cb150294 	sub	x20, x20, x21
     620:	f9401e63 	ldr	x3, [x19, #56]
     624:	aa1403e2 	mov	x2, x20
     628:	f9402a60 	ldr	x0, [x19, #80]
     62c:	aa1503e1 	mov	x1, x21
     630:	b4000163 	cbz	x3, 65c <lib_fflush_unlocked+0x84>
     634:	d63f0060 	blr	x3
     638:	b6f80160 	tbz	x0, #63, 664 <lib_fflush_unlocked+0x8c>
     63c:	3942ea60 	ldrb	w0, [x19, #186]
     640:	321f0000 	orr	w0, w0, #0x2
     644:	3902ea60 	strb	w0, [x19, #186]
     648:	94000000 	bl	a8c <__errno>	648: R_AARCH64_CALL26	__errno
     64c:	b9400000 	ldr	w0, [x0]
     650:	4b0003e0 	neg	w0, w0
     654:	93407c00 	sxtw	x0, w0
     658:	17ffffe8 	b	5f8 <lib_fflush_unlocked+0x20>
     65c:	94000000 	bl	14d8 <write>	65c: R_AARCH64_CALL26	write
     660:	17fffff6 	b	638 <lib_fflush_unlocked+0x60>
     664:	cb000294 	sub	x20, x20, x0
     668:	8b0002b5 	add	x21, x21, x0
     66c:	f100029f 	cmp	x20, #0x0
     670:	54fffd8c 	b.gt	620 <lib_fflush_unlocked+0x48>
     674:	f9402e60 	ldr	x0, [x19, #88]
     678:	f9003660 	str	x0, [x19, #104]
     67c:	17ffffde 	b	5f4 <lib_fflush_unlocked+0x1c>
     680:	92800100 	mov	x0, #0xfffffffffffffff7    	// #-9
     684:	17ffffdd 	b	5f8 <lib_fflush_unlocked+0x20>

0000000000000688 <lib_fflush>:
lib_fflush():
     688:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     68c:	aa0003f3 	mov	x19, x0
     690:	f9000bf4 	str	x20, [sp, #16]
     694:	94000000 	bl	814 <flockfile>	694: R_AARCH64_CALL26	flockfile
     698:	aa1303e0 	mov	x0, x19
     69c:	94000000 	bl	5d8 <lib_fflush_unlocked>	69c: R_AARCH64_CALL26	lib_fflush_unlocked
     6a0:	aa0003f4 	mov	x20, x0
     6a4:	aa1303e0 	mov	x0, x19
     6a8:	94000000 	bl	824 <funlockfile>	6a8: R_AARCH64_CALL26	funlockfile
     6ac:	aa1403e0 	mov	x0, x20
     6b0:	f9400bf4 	ldr	x20, [sp, #16]
     6b4:	a8c24ffe 	ldp	x30, x19, [sp], #32
     6b8:	d65f03c0 	ret

00000000000006bc <lib_rdflush_unlocked>:
lib_rdflush_unlocked():
     6bc:	f81e0ffe 	str	x30, [sp, #-32]!
     6c0:	b50000e0 	cbnz	x0, 6dc <lib_rdflush_unlocked+0x20>
     6c4:	94000000 	bl	a8c <__errno>	6c4: R_AARCH64_CALL26	__errno
     6c8:	52800121 	mov	w1, #0x9                   	// #9
     6cc:	b9000001 	str	w1, [x0]
     6d0:	12800000 	mov	w0, #0xffffffff            	// #-1
     6d4:	f84207fe 	ldr	x30, [sp], #32
     6d8:	d65f03c0 	ret
     6dc:	f9402c02 	ldr	x2, [x0, #88]
     6e0:	b4000242 	cbz	x2, 728 <lib_rdflush_unlocked+0x6c>
     6e4:	f9403803 	ldr	x3, [x0, #112]
     6e8:	eb03005f 	cmp	x2, x3
     6ec:	540001e0 	b.eq	728 <lib_rdflush_unlocked+0x6c>  // b.none
     6f0:	f9403401 	ldr	x1, [x0, #104]
     6f4:	a9068802 	stp	x2, x2, [x0, #104]
     6f8:	3942ec04 	ldrb	w4, [x0, #187]
     6fc:	3902ec1f 	strb	wzr, [x0, #187]
     700:	52800022 	mov	w2, #0x1                   	// #1
     704:	4b040021 	sub	w1, w1, w4
     708:	4b030021 	sub	w1, w1, w3
     70c:	b9001fe1 	str	w1, [sp, #28]
     710:	f9402003 	ldr	x3, [x0, #64]
     714:	f9402800 	ldr	x0, [x0, #80]
     718:	b40000c3 	cbz	x3, 730 <lib_rdflush_unlocked+0x74>
     71c:	910073e1 	add	x1, sp, #0x1c
     720:	d63f0060 	blr	x3
     724:	37fffd60 	tbnz	w0, #31, 6d0 <lib_rdflush_unlocked+0x14>
     728:	52800000 	mov	w0, #0x0                   	// #0
     72c:	17ffffea 	b	6d4 <lib_rdflush_unlocked+0x18>
     730:	94000000 	bl	141c <lseek>	730: R_AARCH64_CALL26	lseek
     734:	17fffffc 	b	724 <lib_rdflush_unlocked+0x68>

0000000000000738 <fputs_unlocked>:
fputs_unlocked():
     738:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     73c:	a90157f4 	stp	x20, x21, [sp, #16]
     740:	aa0103f5 	mov	x21, x1
     744:	aa0003f4 	mov	x20, x0
     748:	3942e821 	ldrb	w1, [x1, #186]
     74c:	37100401 	tbnz	w1, #2, 7cc <fputs_unlocked+0x94>
     750:	94000000 	bl	180 <strlen>	750: R_AARCH64_CALL26	strlen
     754:	340001c0 	cbz	w0, 78c <fputs_unlocked+0x54>
     758:	93407c01 	sxtw	x1, w0
     75c:	aa1503e2 	mov	x2, x21
     760:	aa1403e0 	mov	x0, x20
     764:	94000000 	bl	434 <lib_fwrite_unlocked>	764: R_AARCH64_CALL26	lib_fwrite_unlocked
     768:	7100001f 	cmp	w0, #0x0
     76c:	5a9fa000 	csinv	w0, w0, wzr, ge	// ge = tcont
     770:	14000007 	b	78c <fputs_unlocked+0x54>
     774:	aa1503e2 	mov	x2, x21
     778:	d2800021 	mov	x1, #0x1                   	// #1
     77c:	94000000 	bl	434 <lib_fwrite_unlocked>	77c: R_AARCH64_CALL26	lib_fwrite_unlocked
     780:	7100001f 	cmp	w0, #0x0
     784:	540000ac 	b.gt	798 <fputs_unlocked+0x60>
     788:	12800000 	mov	w0, #0xffffffff            	// #-1
     78c:	a94157f4 	ldp	x20, x21, [sp, #16]
     790:	a8c24ffe 	ldp	x30, x19, [sp], #32
     794:	d65f03c0 	ret
     798:	38736a80 	ldrb	w0, [x20, x19]
     79c:	7100281f 	cmp	w0, #0xa
     7a0:	540000e0 	b.eq	7bc <fputs_unlocked+0x84>  // b.none
     7a4:	91000673 	add	x19, x19, #0x1
     7a8:	38736a81 	ldrb	w1, [x20, x19]
     7ac:	8b130280 	add	x0, x20, x19
     7b0:	35fffe21 	cbnz	w1, 774 <fputs_unlocked+0x3c>
     7b4:	2a1303e0 	mov	w0, w19
     7b8:	17fffff5 	b	78c <fputs_unlocked+0x54>
     7bc:	aa1503e0 	mov	x0, x21
     7c0:	94000000 	bl	5d8 <lib_fflush_unlocked>	7c0: R_AARCH64_CALL26	lib_fflush_unlocked
     7c4:	36ffff00 	tbz	w0, #31, 7a4 <fputs_unlocked+0x6c>
     7c8:	17fffff0 	b	788 <fputs_unlocked+0x50>
     7cc:	d2800013 	mov	x19, #0x0                   	// #0
     7d0:	17fffff6 	b	7a8 <fputs_unlocked+0x70>

00000000000007d4 <fputs>:
fputs():
     7d4:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     7d8:	aa0103f3 	mov	x19, x1
     7dc:	f9000bf4 	str	x20, [sp, #16]
     7e0:	aa0003f4 	mov	x20, x0
     7e4:	aa0103e0 	mov	x0, x1
     7e8:	94000000 	bl	814 <flockfile>	7e8: R_AARCH64_CALL26	flockfile
     7ec:	aa1303e1 	mov	x1, x19
     7f0:	aa1403e0 	mov	x0, x20
     7f4:	94000000 	bl	738 <fputs_unlocked>	7f4: R_AARCH64_CALL26	fputs_unlocked
     7f8:	2a0003f4 	mov	w20, w0
     7fc:	aa1303e0 	mov	x0, x19
     800:	94000000 	bl	824 <funlockfile>	800: R_AARCH64_CALL26	funlockfile
     804:	2a1403e0 	mov	w0, w20
     808:	f9400bf4 	ldr	x20, [sp, #16]
     80c:	a8c24ffe 	ldp	x30, x19, [sp], #32
     810:	d65f03c0 	ret

0000000000000814 <flockfile>:
flockfile():
     814:	91002000 	add	x0, x0, #0x8
     818:	14000000 	b	df0 <nxrmutex_lock>	818: R_AARCH64_JUMP26	nxrmutex_lock

000000000000081c <ftrylockfile>:
ftrylockfile():
     81c:	91002000 	add	x0, x0, #0x8
     820:	14000000 	b	e48 <nxrmutex_trylock>	820: R_AARCH64_JUMP26	nxrmutex_trylock

0000000000000824 <funlockfile>:
funlockfile():
     824:	91002000 	add	x0, x0, #0x8
     828:	14000000 	b	f78 <nxrmutex_unlock>	828: R_AARCH64_JUMP26	nxrmutex_unlock

000000000000082c <lib_get_streams>:
lib_get_streams():
     82c:	f81f0ffe 	str	x30, [sp, #-16]!
     830:	94000000 	bl	a74 <task_get_info>	830: R_AARCH64_CALL26	task_get_info
     834:	9106a000 	add	x0, x0, #0x1a8
     838:	f84107fe 	ldr	x30, [sp], #16
     83c:	d65f03c0 	ret

0000000000000840 <lib_get_stream>:
lib_get_stream():
     840:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
     844:	2a0003f3 	mov	w19, w0
     848:	94000000 	bl	a74 <task_get_info>	848: R_AARCH64_CALL26	task_get_info
     84c:	52801802 	mov	w2, #0xc0                  	// #192
     850:	d2803901 	mov	x1, #0x1c8                 	// #456
     854:	9b220673 	smaddl	x19, w19, w2, x1
     858:	8b130000 	add	x0, x0, x19
     85c:	a8c14ffe 	ldp	x30, x19, [sp], #16
     860:	d65f03c0 	ret

0000000000000864 <exit>:
exit():
     864:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
     868:	d2800001 	mov	x1, #0x0                   	// #0
     86c:	910003fd 	mov	x29, sp
     870:	f9000bf3 	str	x19, [sp, #16]
     874:	2a0003f3 	mov	w19, w0
     878:	52800020 	mov	w0, #0x1                   	// #1
     87c:	94000000 	bl	1054 <task_setcancelstate>	87c: R_AARCH64_CALL26	task_setcancelstate
     880:	52800001 	mov	w1, #0x0                   	// #0
     884:	2a1303e0 	mov	w0, w19
     888:	94000000 	bl	984 <atexit_call_exitfuncs>	888: R_AARCH64_CALL26	atexit_call_exitfuncs
     88c:	d2800000 	mov	x0, #0x0                   	// #0
     890:	94000000 	bl	1234 <fflush>	890: R_AARCH64_CALL26	fflush
     894:	2a1303e0 	mov	w0, w19
     898:	94000000 	bl	13d4 <_exit>	898: R_AARCH64_CALL26	_exit

000000000000089c <quick_exit>:
quick_exit():
     89c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
     8a0:	d2800001 	mov	x1, #0x0                   	// #0
     8a4:	910003fd 	mov	x29, sp
     8a8:	f9000bf3 	str	x19, [sp, #16]
     8ac:	2a0003f3 	mov	w19, w0
     8b0:	52800020 	mov	w0, #0x1                   	// #1
     8b4:	94000000 	bl	1054 <task_setcancelstate>	8b4: R_AARCH64_CALL26	task_setcancelstate
     8b8:	52800021 	mov	w1, #0x1                   	// #1
     8bc:	2a1303e0 	mov	w0, w19
     8c0:	94000000 	bl	984 <atexit_call_exitfuncs>	8c0: R_AARCH64_CALL26	atexit_call_exitfuncs
     8c4:	2a1303e0 	mov	w0, w19
     8c8:	94000000 	bl	13d4 <_exit>	8c8: R_AARCH64_CALL26	_exit

00000000000008cc <_Exit>:
_Exit():
     8cc:	f81f0ffe 	str	x30, [sp, #-16]!
     8d0:	94000000 	bl	13d4 <_exit>	8d0: R_AARCH64_CALL26	_exit

00000000000008d4 <atexit_register>:
atexit_register():
     8d4:	a9bc4ffe 	stp	x30, x19, [sp, #-64]!
     8d8:	a90157f4 	stp	x20, x21, [sp, #16]
     8dc:	a9025ff6 	stp	x22, x23, [sp, #32]
     8e0:	aa0103f6 	mov	x22, x1
     8e4:	aa0203f7 	mov	x23, x2
     8e8:	f9001bf8 	str	x24, [sp, #48]
     8ec:	2a0003f8 	mov	w24, w0
     8f0:	94000000 	bl	a74 <task_get_info>	8f0: R_AARCH64_CALL26	task_get_info
     8f4:	aa0003f5 	mov	x21, x0
     8f8:	94000000 	bl	a74 <task_get_info>	8f8: R_AARCH64_CALL26	task_get_info
     8fc:	b4000416 	cbz	x22, 97c <atexit_register+0xa8>
     900:	aa0003f4 	mov	x20, x0
     904:	aa1503e0 	mov	x0, x21
     908:	94000000 	bl	b6c <nxmutex_lock>	908: R_AARCH64_CALL26	nxmutex_lock
     90c:	36f80100 	tbz	w0, #31, 92c <atexit_register+0x58>
     910:	4b0003f3 	neg	w19, w0
     914:	f9401bf8 	ldr	x24, [sp, #48]
     918:	2a1303e0 	mov	w0, w19
     91c:	a94157f4 	ldp	x20, x21, [sp, #16]
     920:	a9425ff6 	ldp	x22, x23, [sp, #32]
     924:	a8c44ffe 	ldp	x30, x19, [sp], #64
     928:	d65f03c0 	ret
     92c:	b9402283 	ldr	w3, [x20, #32]
     930:	91008281 	add	x1, x20, #0x20
     934:	71003c7f 	cmp	w3, #0xf
     938:	540001ec 	b.gt	974 <atexit_register+0xa0>
     93c:	93407c60 	sxtw	x0, w3
     940:	52800304 	mov	w4, #0x18                  	// #24
     944:	d2800302 	mov	x2, #0x18                  	// #24
     948:	52800013 	mov	w19, #0x0                   	// #0
     94c:	9b245064 	smaddl	x4, w3, w4, x20
     950:	11000463 	add	w3, w3, #0x1
     954:	9b020400 	madd	x0, x0, x2, x1
     958:	b9002898 	str	w24, [x4, #40]
     95c:	f9001896 	str	x22, [x4, #48]
     960:	f9000c17 	str	x23, [x0, #24]
     964:	b9002283 	str	w3, [x20, #32]
     968:	aa1503e0 	mov	x0, x21
     96c:	94000000 	bl	ce4 <nxmutex_unlock>	96c: R_AARCH64_CALL26	nxmutex_unlock
     970:	17ffffe9 	b	914 <atexit_register+0x40>
     974:	12800013 	mov	w19, #0xffffffff            	// #-1
     978:	17fffffc 	b	968 <atexit_register+0x94>
     97c:	12800013 	mov	w19, #0xffffffff            	// #-1
     980:	17ffffe5 	b	914 <atexit_register+0x40>

0000000000000984 <atexit_call_exitfuncs>:
atexit_call_exitfuncs():
     984:	a9bd4ffe 	stp	x30, x19, [sp, #-48]!
     988:	a90157f4 	stp	x20, x21, [sp, #16]
     98c:	2a0003f5 	mov	w21, w0
     990:	f90013f6 	str	x22, [sp, #32]
     994:	12001c36 	and	w22, w1, #0xff
     998:	94000000 	bl	a74 <task_get_info>	998: R_AARCH64_CALL26	task_get_info
     99c:	b9402013 	ldr	w19, [x0, #32]
     9a0:	52800301 	mov	w1, #0x18                  	// #24
     9a4:	51000674 	sub	w20, w19, #0x1
     9a8:	9b210273 	smaddl	x19, w19, w1, x0
     9ac:	36f800b4 	tbz	w20, #31, 9c0 <atexit_call_exitfuncs+0x3c>
     9b0:	f94013f6 	ldr	x22, [sp, #32]
     9b4:	a94157f4 	ldp	x20, x21, [sp, #16]
     9b8:	a8c34ffe 	ldp	x30, x19, [sp], #48
     9bc:	d65f03c0 	ret
     9c0:	a9418262 	ldp	x2, x0, [x19, #24]
     9c4:	a901fe7f 	stp	xzr, xzr, [x19, #24]
     9c8:	b9401263 	ldr	w3, [x19, #16]
     9cc:	b4000122 	cbz	x2, 9f0 <atexit_call_exitfuncs+0x6c>
     9d0:	7100087f 	cmp	w3, #0x2
     9d4:	1a9f17e1 	cset	w1, eq	// eq = none
     9d8:	6b16003f 	cmp	w1, w22
     9dc:	540000a1 	b.ne	9f0 <atexit_call_exitfuncs+0x6c>  // b.any
     9e0:	51000461 	sub	w1, w3, #0x1
     9e4:	7100043f 	cmp	w1, #0x1
     9e8:	540000a8 	b.hi	9fc <atexit_call_exitfuncs+0x78>  // b.pmore
     9ec:	d63f0040 	blr	x2
     9f0:	51000694 	sub	w20, w20, #0x1
     9f4:	d1006273 	sub	x19, x19, #0x18
     9f8:	17ffffed 	b	9ac <atexit_call_exitfuncs+0x28>
     9fc:	71000c7f 	cmp	w3, #0x3
     a00:	540000a1 	b.ne	a14 <atexit_call_exitfuncs+0x90>  // b.any
     a04:	aa0003e1 	mov	x1, x0
     a08:	2a1503e0 	mov	w0, w21
     a0c:	d63f0040 	blr	x2
     a10:	17fffff8 	b	9f0 <atexit_call_exitfuncs+0x6c>
     a14:	7100107f 	cmp	w3, #0x4
     a18:	54fffec1 	b.ne	9f0 <atexit_call_exitfuncs+0x6c>  // b.any
     a1c:	d63f0040 	blr	x2
     a20:	17fffff4 	b	9f0 <atexit_call_exitfuncs+0x6c>

0000000000000a24 <atexit>:
atexit():
     a24:	aa0003e1 	mov	x1, x0
     a28:	d2800003 	mov	x3, #0x0                   	// #0
     a2c:	d2800002 	mov	x2, #0x0                   	// #0
     a30:	52800020 	mov	w0, #0x1                   	// #1
     a34:	14000000 	b	8d4 <atexit_register>	a34: R_AARCH64_JUMP26	atexit_register

0000000000000a38 <at_quick_exit>:
at_quick_exit():
     a38:	aa0003e1 	mov	x1, x0
     a3c:	d2800003 	mov	x3, #0x0                   	// #0
     a40:	d2800002 	mov	x2, #0x0                   	// #0
     a44:	52800040 	mov	w0, #0x2                   	// #2
     a48:	14000000 	b	8d4 <atexit_register>	a48: R_AARCH64_JUMP26	atexit_register

0000000000000a4c <on_exit>:
on_exit():
     a4c:	aa0103e2 	mov	x2, x1
     a50:	d2800003 	mov	x3, #0x0                   	// #0
     a54:	aa0003e1 	mov	x1, x0
     a58:	52800060 	mov	w0, #0x3                   	// #3
     a5c:	14000000 	b	8d4 <atexit_register>	a5c: R_AARCH64_JUMP26	atexit_register

0000000000000a60 <__cxa_atexit>:
__cxa_atexit():
     a60:	aa0203e3 	mov	x3, x2
     a64:	aa0103e2 	mov	x2, x1
     a68:	aa0003e1 	mov	x1, x0
     a6c:	52800080 	mov	w0, #0x4                   	// #4
     a70:	14000000 	b	8d4 <atexit_register>	a70: R_AARCH64_JUMP26	atexit_register

0000000000000a74 <task_get_info>:
task_get_info():
     a74:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
     a78:	910003fd 	mov	x29, sp
     a7c:	9273cba0 	and	x0, x29, #0xffffffffffffe000
     a80:	a8c17bfd 	ldp	x29, x30, [sp], #16
     a84:	f9400000 	ldr	x0, [x0]
     a88:	d65f03c0 	ret

0000000000000a8c <__errno>:
__errno():
     a8c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
     a90:	d283ffe2 	mov	x2, #0x1fff                	// #8191
     a94:	90000000 	adrp	x0, 15f0 <_ectors>	a94: R_AARCH64_ADR_PREL_PG_HI21	.bss
     a98:	910003fd 	mov	x29, sp
     a9c:	91000000 	add	x0, x0, #0x0	a9c: R_AARCH64_ADD_ABS_LO12_NC	.bss
     aa0:	9273cba1 	and	x1, x29, #0xffffffffffffe000
     aa4:	eb0203bf 	cmp	x29, x2
     aa8:	91003021 	add	x1, x1, #0xc
     aac:	9a819000 	csel	x0, x0, x1, ls	// ls = plast
     ab0:	a8c17bfd 	ldp	x29, x30, [sp], #16
     ab4:	d65f03c0 	ret

0000000000000ab8 <nxmutex_init>:
nxmutex_init():
     ab8:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     abc:	52800022 	mov	w2, #0x1                   	// #1
     ac0:	52800001 	mov	w1, #0x0                   	// #0
     ac4:	f9000bf4 	str	x20, [sp, #16]
     ac8:	aa0003f4 	mov	x20, x0
     acc:	94000000 	bl	10cc <nxsem_init>	acc: R_AARCH64_CALL26	nxsem_init
     ad0:	2a0003f3 	mov	w19, w0
     ad4:	37f800c0 	tbnz	w0, #31, aec <nxmutex_init+0x34>
     ad8:	12800000 	mov	w0, #0xffffffff            	// #-1
     adc:	b9001a80 	str	w0, [x20, #24]
     ae0:	52800081 	mov	w1, #0x4                   	// #4
     ae4:	aa1403e0 	mov	x0, x20
     ae8:	94000000 	bl	113c <nxsem_set_protocol>	ae8: R_AARCH64_CALL26	nxsem_set_protocol
     aec:	f9400bf4 	ldr	x20, [sp, #16]
     af0:	2a1303e0 	mov	w0, w19
     af4:	a8c24ffe 	ldp	x30, x19, [sp], #32
     af8:	d65f03c0 	ret

0000000000000afc <nxmutex_destroy>:
nxmutex_destroy():
     afc:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
     b00:	aa0003f3 	mov	x19, x0
     b04:	94000000 	bl	1478 <nxsem_destroy>	b04: R_AARCH64_CALL26	nxsem_destroy
     b08:	37f80060 	tbnz	w0, #31, b14 <nxmutex_destroy+0x18>
     b0c:	12800001 	mov	w1, #0xffffffff            	// #-1
     b10:	b9001a61 	str	w1, [x19, #24]
     b14:	a8c14ffe 	ldp	x30, x19, [sp], #16
     b18:	d65f03c0 	ret

0000000000000b1c <nxmutex_is_hold>:
nxmutex_is_hold():
     b1c:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
     b20:	b9401813 	ldr	w19, [x0, #24]
     b24:	94000000 	bl	1408 <gettid>	b24: R_AARCH64_CALL26	gettid
     b28:	6b00027f 	cmp	w19, w0
     b2c:	1a9f17e0 	cset	w0, eq	// eq = none
     b30:	a8c14ffe 	ldp	x30, x19, [sp], #16
     b34:	d65f03c0 	ret

0000000000000b38 <nxmutex_get_holder>:
nxmutex_get_holder():
     b38:	b9401800 	ldr	w0, [x0, #24]
     b3c:	d65f03c0 	ret

0000000000000b40 <nxmutex_is_locked>:
nxmutex_is_locked():
     b40:	f81e0ffe 	str	x30, [sp, #-32]!
     b44:	910073e1 	add	x1, sp, #0x1c
     b48:	94000000 	bl	11b0 <nxsem_get_value>	b48: R_AARCH64_CALL26	nxsem_get_value
     b4c:	37f800c0 	tbnz	w0, #31, b64 <nxmutex_is_locked+0x24>
     b50:	b9401fe0 	ldr	w0, [sp, #28]
     b54:	7100001f 	cmp	w0, #0x0
     b58:	1a9fc7e0 	cset	w0, le
     b5c:	f84207fe 	ldr	x30, [sp], #32
     b60:	d65f03c0 	ret
     b64:	52800000 	mov	w0, #0x0                   	// #0
     b68:	17fffffd 	b	b5c <nxmutex_is_locked+0x1c>

0000000000000b6c <nxmutex_lock>:
nxmutex_lock():
     b6c:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     b70:	f9000bf4 	str	x20, [sp, #16]
     b74:	aa0003f4 	mov	x20, x0
     b78:	94000000 	bl	b1c <nxmutex_is_hold>	b78: R_AARCH64_CALL26	nxmutex_is_hold
     b7c:	36000140 	tbz	w0, #0, ba4 <nxmutex_lock+0x38>
     b80:	90000002 	adrp	x2, 14fc <_etext>	b80: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0xf
     b84:	90000000 	adrp	x0, 14fc <_etext>	b84: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x27
     b88:	91000042 	add	x2, x2, #0x0	b88: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0xf
     b8c:	91000000 	add	x0, x0, #0x0	b8c: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x27
     b90:	52801f81 	mov	w1, #0xfc                  	// #252
     b94:	94000000 	bl	136c <__assert>	b94: R_AARCH64_CALL26	__assert
     b98:	3101f41f 	cmn	w0, #0x7d
     b9c:	3a441804 	ccmn	w0, #0x4, #0x4, ne	// ne = any
     ba0:	540000e1 	b.ne	bbc <nxmutex_lock+0x50>  // b.any
     ba4:	aa1403e0 	mov	x0, x20
     ba8:	94000000 	bl	14c0 <nxsem_wait>	ba8: R_AARCH64_CALL26	nxsem_wait
     bac:	2a0003f3 	mov	w19, w0
     bb0:	37ffff40 	tbnz	w0, #31, b98 <nxmutex_lock+0x2c>
     bb4:	94000000 	bl	1408 <gettid>	bb4: R_AARCH64_CALL26	gettid
     bb8:	b9001a80 	str	w0, [x20, #24]
     bbc:	f9400bf4 	ldr	x20, [sp, #16]
     bc0:	2a1303e0 	mov	w0, w19
     bc4:	a8c24ffe 	ldp	x30, x19, [sp], #32
     bc8:	d65f03c0 	ret

0000000000000bcc <nxmutex_trylock>:
nxmutex_trylock():
     bcc:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     bd0:	f9000bf4 	str	x20, [sp, #16]
     bd4:	aa0003f4 	mov	x20, x0
     bd8:	94000000 	bl	14a8 <nxsem_trywait>	bd8: R_AARCH64_CALL26	nxsem_trywait
     bdc:	2a0003f3 	mov	w19, w0
     be0:	37f80060 	tbnz	w0, #31, bec <nxmutex_trylock+0x20>
     be4:	94000000 	bl	1408 <gettid>	be4: R_AARCH64_CALL26	gettid
     be8:	b9001a80 	str	w0, [x20, #24]
     bec:	f9400bf4 	ldr	x20, [sp, #16]
     bf0:	2a1303e0 	mov	w0, w19
     bf4:	a8c24ffe 	ldp	x30, x19, [sp], #32
     bf8:	d65f03c0 	ret

0000000000000bfc <nxmutex_clocklock>:
nxmutex_clocklock():
     bfc:	a9bd4ffe 	stp	x30, x19, [sp, #-48]!
     c00:	a90157f4 	stp	x20, x21, [sp, #16]
     c04:	aa0003f4 	mov	x20, x0
     c08:	aa0203f5 	mov	x21, x2
     c0c:	f90013f6 	str	x22, [sp, #32]
     c10:	2a0103f6 	mov	w22, w1
     c14:	b4000235 	cbz	x21, c58 <nxmutex_clocklock+0x5c>
     c18:	aa1503e2 	mov	x2, x21
     c1c:	2a1603e1 	mov	w1, w22
     c20:	aa1403e0 	mov	x0, x20
     c24:	94000000 	bl	1454 <nxsem_clockwait>	c24: R_AARCH64_CALL26	nxsem_clockwait
     c28:	3101f41f 	cmn	w0, #0x7d
     c2c:	2a0003f3 	mov	w19, w0
     c30:	3a441804 	ccmn	w0, #0x4, #0x4, ne	// ne = any
     c34:	54ffff00 	b.eq	c14 <nxmutex_clocklock+0x18>  // b.none
     c38:	37f80060 	tbnz	w0, #31, c44 <nxmutex_clocklock+0x48>
     c3c:	94000000 	bl	1408 <gettid>	c3c: R_AARCH64_CALL26	gettid
     c40:	b9001a80 	str	w0, [x20, #24]
     c44:	f94013f6 	ldr	x22, [sp, #32]
     c48:	2a1303e0 	mov	w0, w19
     c4c:	a94157f4 	ldp	x20, x21, [sp, #16]
     c50:	a8c34ffe 	ldp	x30, x19, [sp], #48
     c54:	d65f03c0 	ret
     c58:	aa1403e0 	mov	x0, x20
     c5c:	94000000 	bl	14c0 <nxsem_wait>	c5c: R_AARCH64_CALL26	nxsem_wait
     c60:	17fffff2 	b	c28 <nxmutex_clocklock+0x2c>

0000000000000c64 <nxmutex_timedlock>:
nxmutex_timedlock():
     c64:	a9bc4ffe 	stp	x30, x19, [sp, #-64]!
     c68:	2a0103f3 	mov	w19, w1
     c6c:	910083e1 	add	x1, sp, #0x20
     c70:	f9000bf4 	str	x20, [sp, #16]
     c74:	aa0003f4 	mov	x20, x0
     c78:	52800020 	mov	w0, #0x1                   	// #1
     c7c:	94000000 	bl	13e8 <clock_gettime>	c7c: R_AARCH64_CALL26	clock_gettime
     c80:	2a1303e1 	mov	w1, w19
     c84:	d2807d00 	mov	x0, #0x3e8                 	// #1000
     c88:	9ac00822 	udiv	x2, x1, x0
     c8c:	9b008441 	msub	x1, x2, x0, x1
     c90:	a94203e3 	ldp	x3, x0, [sp, #32]
     c94:	8b030043 	add	x3, x2, x3
     c98:	52884802 	mov	w2, #0x4240                	// #16960
     c9c:	72a001e2 	movk	w2, #0xf, lsl #16
     ca0:	9b220021 	smaddl	x1, w1, w2, x0
     ca4:	d2993fe0 	mov	x0, #0xc9ff                	// #51711
     ca8:	f2a77340 	movk	x0, #0x3b9a, lsl #16
     cac:	eb00003f 	cmp	x1, x0
     cb0:	540000ad 	b.le	cc4 <nxmutex_timedlock+0x60>
     cb4:	92993fe0 	mov	x0, #0xffffffffffff3600    	// #-51712
     cb8:	91000463 	add	x3, x3, #0x1
     cbc:	f2b88ca0 	movk	x0, #0xc465, lsl #16
     cc0:	8b000021 	add	x1, x1, x0
     cc4:	9100c3e2 	add	x2, sp, #0x30
     cc8:	aa1403e0 	mov	x0, x20
     ccc:	a90307e3 	stp	x3, x1, [sp, #48]
     cd0:	52800021 	mov	w1, #0x1                   	// #1
     cd4:	94000000 	bl	bfc <nxmutex_clocklock>	cd4: R_AARCH64_CALL26	nxmutex_clocklock
     cd8:	f9400bf4 	ldr	x20, [sp, #16]
     cdc:	a8c44ffe 	ldp	x30, x19, [sp], #64
     ce0:	d65f03c0 	ret

0000000000000ce4 <nxmutex_unlock>:
nxmutex_unlock():
     ce4:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     ce8:	f9000bf4 	str	x20, [sp, #16]
     cec:	b9401801 	ldr	w1, [x0, #24]
     cf0:	3100083f 	cmn	w1, #0x2
     cf4:	540002c0 	b.eq	d4c <nxmutex_unlock+0x68>  // b.none
     cf8:	aa0003f3 	mov	x19, x0
     cfc:	94000000 	bl	b1c <nxmutex_is_hold>	cfc: R_AARCH64_CALL26	nxmutex_is_hold
     d00:	370000e0 	tbnz	w0, #0, d1c <nxmutex_unlock+0x38>
     d04:	90000002 	adrp	x2, 14fc <_etext>	d04: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x38
     d08:	90000000 	adrp	x0, 14fc <_etext>	d08: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x27
     d0c:	91000042 	add	x2, x2, #0x0	d0c: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x38
     d10:	91000000 	add	x0, x0, #0x0	d10: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x27
     d14:	52803601 	mov	w1, #0x1b0                 	// #432
     d18:	94000000 	bl	136c <__assert>	d18: R_AARCH64_CALL26	__assert
     d1c:	12800000 	mov	w0, #0xffffffff            	// #-1
     d20:	b9001a60 	str	w0, [x19, #24]
     d24:	aa1303e0 	mov	x0, x19
     d28:	94000000 	bl	1490 <nxsem_post>	d28: R_AARCH64_CALL26	nxsem_post
     d2c:	2a0003f4 	mov	w20, w0
     d30:	36f80060 	tbz	w0, #31, d3c <nxmutex_unlock+0x58>
     d34:	94000000 	bl	1408 <gettid>	d34: R_AARCH64_CALL26	gettid
     d38:	b9001a60 	str	w0, [x19, #24]
     d3c:	2a1403e0 	mov	w0, w20
     d40:	f9400bf4 	ldr	x20, [sp, #16]
     d44:	a8c24ffe 	ldp	x30, x19, [sp], #32
     d48:	d65f03c0 	ret
     d4c:	52800014 	mov	w20, #0x0                   	// #0
     d50:	17fffffb 	b	d3c <nxmutex_unlock+0x58>

0000000000000d54 <nxmutex_breaklock>:
nxmutex_breaklock():
     d54:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     d58:	aa0103f3 	mov	x19, x1
     d5c:	f9000bf4 	str	x20, [sp, #16]
     d60:	aa0003f4 	mov	x20, x0
     d64:	b900003f 	str	wzr, [x1]
     d68:	94000000 	bl	b1c <nxmutex_is_hold>	d68: R_AARCH64_CALL26	nxmutex_is_hold
     d6c:	36000120 	tbz	w0, #0, d90 <nxmutex_breaklock+0x3c>
     d70:	aa1403e0 	mov	x0, x20
     d74:	94000000 	bl	ce4 <nxmutex_unlock>	d74: R_AARCH64_CALL26	nxmutex_unlock
     d78:	37f80060 	tbnz	w0, #31, d84 <nxmutex_breaklock+0x30>
     d7c:	52800021 	mov	w1, #0x1                   	// #1
     d80:	b9000261 	str	w1, [x19]
     d84:	f9400bf4 	ldr	x20, [sp, #16]
     d88:	a8c24ffe 	ldp	x30, x19, [sp], #32
     d8c:	d65f03c0 	ret
     d90:	52800000 	mov	w0, #0x0                   	// #0
     d94:	17fffffc 	b	d84 <nxmutex_breaklock+0x30>

0000000000000d98 <nxmutex_restorelock>:
nxmutex_restorelock():
     d98:	34000041 	cbz	w1, da0 <nxmutex_restorelock+0x8>
     d9c:	14000000 	b	b6c <nxmutex_lock>	d9c: R_AARCH64_JUMP26	nxmutex_lock
     da0:	52800000 	mov	w0, #0x0                   	// #0
     da4:	d65f03c0 	ret

0000000000000da8 <nxmutex_set_protocol>:
nxmutex_set_protocol():
     da8:	14000000 	b	113c <nxsem_set_protocol>	da8: R_AARCH64_JUMP26	nxsem_set_protocol

0000000000000dac <nxrmutex_init>:
nxrmutex_init():
     dac:	b900201f 	str	wzr, [x0, #32]
     db0:	14000000 	b	ab8 <nxmutex_init>	db0: R_AARCH64_JUMP26	nxmutex_init

0000000000000db4 <nxrmutex_destroy>:
nxrmutex_destroy():
     db4:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
     db8:	aa0003f3 	mov	x19, x0
     dbc:	94000000 	bl	afc <nxmutex_destroy>	dbc: R_AARCH64_CALL26	nxmutex_destroy
     dc0:	37f80040 	tbnz	w0, #31, dc8 <nxrmutex_destroy+0x14>
     dc4:	b900227f 	str	wzr, [x19, #32]
     dc8:	a8c14ffe 	ldp	x30, x19, [sp], #16
     dcc:	d65f03c0 	ret

0000000000000dd0 <nxrmutex_is_hold>:
nxrmutex_is_hold():
     dd0:	14000000 	b	b1c <nxmutex_is_hold>	dd0: R_AARCH64_JUMP26	nxmutex_is_hold

0000000000000dd4 <nxrmutex_is_recursive>:
nxrmutex_is_recursive():
     dd4:	b9402000 	ldr	w0, [x0, #32]
     dd8:	7100041f 	cmp	w0, #0x1
     ddc:	1a9f97e0 	cset	w0, hi	// hi = pmore
     de0:	d65f03c0 	ret

0000000000000de4 <nxrmutex_get_holder>:
nxrmutex_get_holder():
     de4:	b9401800 	ldr	w0, [x0, #24]
     de8:	d65f03c0 	ret

0000000000000dec <nxrmutex_is_locked>:
nxrmutex_is_locked():
     dec:	14000000 	b	b40 <nxmutex_is_locked>	dec: R_AARCH64_JUMP26	nxmutex_is_locked

0000000000000df0 <nxrmutex_lock>:
nxrmutex_lock():
     df0:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
     df4:	aa0003f3 	mov	x19, x0
     df8:	94000000 	bl	b1c <nxmutex_is_hold>	df8: R_AARCH64_CALL26	nxmutex_is_hold
     dfc:	370000c0 	tbnz	w0, #0, e14 <nxrmutex_lock+0x24>
     e00:	aa1303e0 	mov	x0, x19
     e04:	94000000 	bl	b6c <nxmutex_lock>	e04: R_AARCH64_CALL26	nxmutex_lock
     e08:	36f80080 	tbz	w0, #31, e18 <nxrmutex_lock+0x28>
     e0c:	a8c14ffe 	ldp	x30, x19, [sp], #16
     e10:	d65f03c0 	ret
     e14:	52800000 	mov	w0, #0x0                   	// #0
     e18:	b9402261 	ldr	w1, [x19, #32]
     e1c:	3100043f 	cmn	w1, #0x1
     e20:	540000e1 	b.ne	e3c <nxrmutex_lock+0x4c>  // b.any
     e24:	90000002 	adrp	x2, 14fc <_etext>	e24: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x4f
     e28:	90000000 	adrp	x0, 14fc <_etext>	e28: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x27
     e2c:	91000042 	add	x2, x2, #0x0	e2c: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x4f
     e30:	91000000 	add	x0, x0, #0x0	e30: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x27
     e34:	52805f21 	mov	w1, #0x2f9                 	// #761
     e38:	94000000 	bl	136c <__assert>	e38: R_AARCH64_CALL26	__assert
     e3c:	11000421 	add	w1, w1, #0x1
     e40:	b9002261 	str	w1, [x19, #32]
     e44:	17fffff2 	b	e0c <nxrmutex_lock+0x1c>

0000000000000e48 <nxrmutex_trylock>:
nxrmutex_trylock():
     e48:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
     e4c:	aa0003f3 	mov	x19, x0
     e50:	94000000 	bl	b1c <nxmutex_is_hold>	e50: R_AARCH64_CALL26	nxmutex_is_hold
     e54:	370000c0 	tbnz	w0, #0, e6c <nxrmutex_trylock+0x24>
     e58:	aa1303e0 	mov	x0, x19
     e5c:	94000000 	bl	bcc <nxmutex_trylock>	e5c: R_AARCH64_CALL26	nxmutex_trylock
     e60:	36f80080 	tbz	w0, #31, e70 <nxrmutex_trylock+0x28>
     e64:	a8c14ffe 	ldp	x30, x19, [sp], #16
     e68:	d65f03c0 	ret
     e6c:	52800000 	mov	w0, #0x0                   	// #0
     e70:	b9402261 	ldr	w1, [x19, #32]
     e74:	3100043f 	cmn	w1, #0x1
     e78:	540000e1 	b.ne	e94 <nxrmutex_trylock+0x4c>  // b.any
     e7c:	90000002 	adrp	x2, 14fc <_etext>	e7c: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x4f
     e80:	90000000 	adrp	x0, 14fc <_etext>	e80: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x27
     e84:	91000042 	add	x2, x2, #0x0	e84: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x4f
     e88:	91000000 	add	x0, x0, #0x0	e88: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x27
     e8c:	52806441 	mov	w1, #0x322                 	// #802
     e90:	94000000 	bl	136c <__assert>	e90: R_AARCH64_CALL26	__assert
     e94:	11000421 	add	w1, w1, #0x1
     e98:	b9002261 	str	w1, [x19, #32]
     e9c:	17fffff2 	b	e64 <nxrmutex_trylock+0x1c>

0000000000000ea0 <nxrmutex_clocklock>:
nxrmutex_clocklock():
     ea0:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     ea4:	aa0003f3 	mov	x19, x0
     ea8:	a90157f4 	stp	x20, x21, [sp, #16]
     eac:	2a0103f4 	mov	w20, w1
     eb0:	aa0203f5 	mov	x21, x2
     eb4:	94000000 	bl	b1c <nxmutex_is_hold>	eb4: R_AARCH64_CALL26	nxmutex_is_hold
     eb8:	37000120 	tbnz	w0, #0, edc <nxrmutex_clocklock+0x3c>
     ebc:	aa1503e2 	mov	x2, x21
     ec0:	2a1403e1 	mov	w1, w20
     ec4:	aa1303e0 	mov	x0, x19
     ec8:	94000000 	bl	bfc <nxmutex_clocklock>	ec8: R_AARCH64_CALL26	nxmutex_clocklock
     ecc:	36f800a0 	tbz	w0, #31, ee0 <nxrmutex_clocklock+0x40>
     ed0:	a94157f4 	ldp	x20, x21, [sp, #16]
     ed4:	a8c24ffe 	ldp	x30, x19, [sp], #32
     ed8:	d65f03c0 	ret
     edc:	52800000 	mov	w0, #0x0                   	// #0
     ee0:	b9402261 	ldr	w1, [x19, #32]
     ee4:	3100043f 	cmn	w1, #0x1
     ee8:	540000e1 	b.ne	f04 <nxrmutex_clocklock+0x64>  // b.any
     eec:	90000002 	adrp	x2, 14fc <_etext>	eec: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x4f
     ef0:	90000000 	adrp	x0, 14fc <_etext>	ef0: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x27
     ef4:	91000042 	add	x2, x2, #0x0	ef4: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x4f
     ef8:	91000000 	add	x0, x0, #0x0	ef8: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x27
     efc:	528069c1 	mov	w1, #0x34e                 	// #846
     f00:	94000000 	bl	136c <__assert>	f00: R_AARCH64_CALL26	__assert
     f04:	11000421 	add	w1, w1, #0x1
     f08:	b9002261 	str	w1, [x19, #32]
     f0c:	17fffff1 	b	ed0 <nxrmutex_clocklock+0x30>

0000000000000f10 <nxrmutex_timedlock>:
nxrmutex_timedlock():
     f10:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     f14:	aa0003f3 	mov	x19, x0
     f18:	f9000bf4 	str	x20, [sp, #16]
     f1c:	2a0103f4 	mov	w20, w1
     f20:	94000000 	bl	b1c <nxmutex_is_hold>	f20: R_AARCH64_CALL26	nxmutex_is_hold
     f24:	37000100 	tbnz	w0, #0, f44 <nxrmutex_timedlock+0x34>
     f28:	2a1403e1 	mov	w1, w20
     f2c:	aa1303e0 	mov	x0, x19
     f30:	94000000 	bl	c64 <nxmutex_timedlock>	f30: R_AARCH64_CALL26	nxmutex_timedlock
     f34:	36f800a0 	tbz	w0, #31, f48 <nxrmutex_timedlock+0x38>
     f38:	f9400bf4 	ldr	x20, [sp, #16]
     f3c:	a8c24ffe 	ldp	x30, x19, [sp], #32
     f40:	d65f03c0 	ret
     f44:	52800000 	mov	w0, #0x0                   	// #0
     f48:	b9402261 	ldr	w1, [x19, #32]
     f4c:	3100043f 	cmn	w1, #0x1
     f50:	540000e1 	b.ne	f6c <nxrmutex_timedlock+0x5c>  // b.any
     f54:	90000002 	adrp	x2, 14fc <_etext>	f54: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x4f
     f58:	90000000 	adrp	x0, 14fc <_etext>	f58: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x27
     f5c:	91000042 	add	x2, x2, #0x0	f5c: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x4f
     f60:	91000000 	add	x0, x0, #0x0	f60: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x27
     f64:	52806f21 	mov	w1, #0x379                 	// #889
     f68:	94000000 	bl	136c <__assert>	f68: R_AARCH64_CALL26	__assert
     f6c:	11000421 	add	w1, w1, #0x1
     f70:	b9002261 	str	w1, [x19, #32]
     f74:	17fffff1 	b	f38 <nxrmutex_timedlock+0x28>

0000000000000f78 <nxrmutex_unlock>:
nxrmutex_unlock():
     f78:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
     f7c:	b9402001 	ldr	w1, [x0, #32]
     f80:	350000e1 	cbnz	w1, f9c <nxrmutex_unlock+0x24>
     f84:	90000002 	adrp	x2, 14fc <_etext>	f84: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x6b
     f88:	90000000 	adrp	x0, 14fc <_etext>	f88: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x27
     f8c:	91000042 	add	x2, x2, #0x0	f8c: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x6b
     f90:	91000000 	add	x0, x0, #0x0	f90: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x27
     f94:	52807321 	mov	w1, #0x399                 	// #921
     f98:	94000000 	bl	136c <__assert>	f98: R_AARCH64_CALL26	__assert
     f9c:	51000421 	sub	w1, w1, #0x1
     fa0:	b9002001 	str	w1, [x0, #32]
     fa4:	aa0003f3 	mov	x19, x0
     fa8:	35000101 	cbnz	w1, fc8 <nxrmutex_unlock+0x50>
     fac:	94000000 	bl	ce4 <nxmutex_unlock>	fac: R_AARCH64_CALL26	nxmutex_unlock
     fb0:	36f80080 	tbz	w0, #31, fc0 <nxrmutex_unlock+0x48>
     fb4:	b9402261 	ldr	w1, [x19, #32]
     fb8:	11000421 	add	w1, w1, #0x1
     fbc:	b9002261 	str	w1, [x19, #32]
     fc0:	a8c14ffe 	ldp	x30, x19, [sp], #16
     fc4:	d65f03c0 	ret
     fc8:	52800000 	mov	w0, #0x0                   	// #0
     fcc:	17fffffd 	b	fc0 <nxrmutex_unlock+0x48>

0000000000000fd0 <nxrmutex_breaklock>:
nxrmutex_breaklock():
     fd0:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
     fd4:	aa0003f3 	mov	x19, x0
     fd8:	f9000bf4 	str	x20, [sp, #16]
     fdc:	aa0103f4 	mov	x20, x1
     fe0:	b900003f 	str	wzr, [x1]
     fe4:	94000000 	bl	b1c <nxmutex_is_hold>	fe4: R_AARCH64_CALL26	nxmutex_is_hold
     fe8:	36000180 	tbz	w0, #0, 1018 <nxrmutex_breaklock+0x48>
     fec:	b9402260 	ldr	w0, [x19, #32]
     ff0:	b9000280 	str	w0, [x20]
     ff4:	aa1303e0 	mov	x0, x19
     ff8:	b900227f 	str	wzr, [x19, #32]
     ffc:	94000000 	bl	ce4 <nxmutex_unlock>	ffc: R_AARCH64_CALL26	nxmutex_unlock
    1000:	36f80060 	tbz	w0, #31, 100c <nxrmutex_breaklock+0x3c>
    1004:	b9400281 	ldr	w1, [x20]
    1008:	b9002261 	str	w1, [x19, #32]
    100c:	f9400bf4 	ldr	x20, [sp, #16]
    1010:	a8c24ffe 	ldp	x30, x19, [sp], #32
    1014:	d65f03c0 	ret
    1018:	52800000 	mov	w0, #0x0                   	// #0
    101c:	17fffffc 	b	100c <nxrmutex_breaklock+0x3c>

0000000000001020 <nxrmutex_restorelock>:
nxrmutex_restorelock():
    1020:	34000161 	cbz	w1, 104c <nxrmutex_restorelock+0x2c>
    1024:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
    1028:	2a0103f3 	mov	w19, w1
    102c:	f9000bf4 	str	x20, [sp, #16]
    1030:	aa0003f4 	mov	x20, x0
    1034:	94000000 	bl	b6c <nxmutex_lock>	1034: R_AARCH64_CALL26	nxmutex_lock
    1038:	37f80040 	tbnz	w0, #31, 1040 <nxrmutex_restorelock+0x20>
    103c:	b9002293 	str	w19, [x20, #32]
    1040:	f9400bf4 	ldr	x20, [sp, #16]
    1044:	a8c24ffe 	ldp	x30, x19, [sp], #32
    1048:	d65f03c0 	ret
    104c:	52800000 	mov	w0, #0x0                   	// #0
    1050:	d65f03c0 	ret

0000000000001054 <task_setcancelstate>:
task_setcancelstate():
    1054:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    1058:	910003fd 	mov	x29, sp
    105c:	9273cba2 	and	x2, x29, #0xffffffffffffe000
    1060:	b4000081 	cbz	x1, 1070 <task_setcancelstate+0x1c>
    1064:	39402043 	ldrb	w3, [x2, #8]
    1068:	12000063 	and	w3, w3, #0x1
    106c:	b9000023 	str	w3, [x1]
    1070:	35000140 	cbnz	w0, 1098 <task_setcancelstate+0x44>
    1074:	39402040 	ldrb	w0, [x2, #8]
    1078:	121f7801 	and	w1, w0, #0xfffffffe
    107c:	39002041 	strb	w1, [x2, #8]
    1080:	36100160 	tbz	w0, #2, 10ac <task_setcancelstate+0x58>
    1084:	128000a1 	mov	w1, #0xfffffffa            	// #-6
    1088:	0a010000 	and	w0, w0, w1
    108c:	39002040 	strb	w0, [x2, #8]
    1090:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    1094:	94000000 	bl	137c <pthread_exit>	1094: R_AARCH64_CALL26	pthread_exit
    1098:	7100041f 	cmp	w0, #0x1
    109c:	540000e1 	b.ne	10b8 <task_setcancelstate+0x64>  // b.any
    10a0:	39402040 	ldrb	w0, [x2, #8]
    10a4:	32000000 	orr	w0, w0, #0x1
    10a8:	39002040 	strb	w0, [x2, #8]
    10ac:	52800000 	mov	w0, #0x0                   	// #0
    10b0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    10b4:	d65f03c0 	ret
    10b8:	94000000 	bl	a8c <__errno>	10b8: R_AARCH64_CALL26	__errno
    10bc:	528002c1 	mov	w1, #0x16                  	// #22
    10c0:	b9000001 	str	w1, [x0]
    10c4:	12800000 	mov	w0, #0xffffffff            	// #-1
    10c8:	17fffffa 	b	10b0 <task_setcancelstate+0x5c>

00000000000010cc <nxsem_init>:
nxsem_init():
    10cc:	f100001f 	cmp	x0, #0x0
    10d0:	7a401841 	ccmp	w2, #0x0, #0x1, ne	// ne = any
    10d4:	5400010a 	b.ge	10f4 <nxsem_init+0x28>  // b.tcont
    10d8:	f81f0ffe 	str	x30, [sp, #-16]!
    10dc:	90000002 	adrp	x2, 14fc <_etext>	10dc: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0x7d
    10e0:	90000000 	adrp	x0, 14fc <_etext>	10e0: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0xa6
    10e4:	91000042 	add	x2, x2, #0x0	10e4: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0x7d
    10e8:	91000000 	add	x0, x0, #0x0	10e8: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0xa6
    10ec:	528008a1 	mov	w1, #0x45                  	// #69
    10f0:	94000000 	bl	136c <__assert>	10f0: R_AARCH64_CALL26	__assert
    10f4:	b9000002 	str	w2, [x0]
    10f8:	3900101f 	strb	wzr, [x0, #4]
    10fc:	a900fc1f 	stp	xzr, xzr, [x0, #8]
    1100:	52800000 	mov	w0, #0x0                   	// #0
    1104:	d65f03c0 	ret

0000000000001108 <sem_init>:
sem_init():
    1108:	f81f0ffe 	str	x30, [sp, #-16]!
    110c:	f100001f 	cmp	x0, #0x0
    1110:	7a401841 	ccmp	w2, #0x0, #0x1, ne	// ne = any
    1114:	540000ea 	b.ge	1130 <sem_init+0x28>  // b.tcont
    1118:	94000000 	bl	a8c <__errno>	1118: R_AARCH64_CALL26	__errno
    111c:	528002c1 	mov	w1, #0x16                  	// #22
    1120:	b9000001 	str	w1, [x0]
    1124:	12800000 	mov	w0, #0xffffffff            	// #-1
    1128:	f84107fe 	ldr	x30, [sp], #16
    112c:	d65f03c0 	ret
    1130:	94000000 	bl	10cc <nxsem_init>	1130: R_AARCH64_CALL26	nxsem_init
    1134:	52800000 	mov	w0, #0x0                   	// #0
    1138:	17fffffc 	b	1128 <sem_init+0x20>

000000000000113c <nxsem_set_protocol>:
nxsem_set_protocol():
    113c:	b5000100 	cbnz	x0, 115c <nxsem_set_protocol+0x20>
    1140:	f81f0ffe 	str	x30, [sp, #-16]!
    1144:	90000002 	adrp	x2, 14fc <_etext>	1144: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0xbb
    1148:	90000000 	adrp	x0, 14fc <_etext>	1148: R_AARCH64_ADR_PREL_PG_HI21	.rodata+0xcd
    114c:	91000042 	add	x2, x2, #0x0	114c: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0xbb
    1150:	91000000 	add	x0, x0, #0x0	1150: R_AARCH64_ADD_ABS_LO12_NC	.rodata+0xcd
    1154:	52800a01 	mov	w1, #0x50                  	// #80
    1158:	94000000 	bl	136c <__assert>	1158: R_AARCH64_CALL26	__assert
    115c:	aa0003e2 	mov	x2, x0
    1160:	72000420 	ands	w0, w1, #0x3
    1164:	540000c0 	b.eq	117c <nxsem_set_protocol+0x40>  // b.none
    1168:	71000c1f 	cmp	w0, #0x3
    116c:	12801121 	mov	w1, #0xffffff76            	// #-138
    1170:	128002a0 	mov	w0, #0xffffffea            	// #-22
    1174:	1a810000 	csel	w0, w0, w1, eq	// eq = none
    1178:	d65f03c0 	ret
    117c:	39001041 	strb	w1, [x2, #4]
    1180:	d65f03c0 	ret

0000000000001184 <sem_setprotocol>:
sem_setprotocol():
    1184:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
    1188:	94000000 	bl	113c <nxsem_set_protocol>	1188: R_AARCH64_CALL26	nxsem_set_protocol
    118c:	2a0003f3 	mov	w19, w0
    1190:	340000a0 	cbz	w0, 11a4 <sem_setprotocol+0x20>
    1194:	4b1303f3 	neg	w19, w19
    1198:	94000000 	bl	a8c <__errno>	1198: R_AARCH64_CALL26	__errno
    119c:	b9000013 	str	w19, [x0]
    11a0:	12800013 	mov	w19, #0xffffffff            	// #-1
    11a4:	2a1303e0 	mov	w0, w19
    11a8:	a8c14ffe 	ldp	x30, x19, [sp], #16
    11ac:	d65f03c0 	ret

00000000000011b0 <nxsem_get_value>:
nxsem_get_value():
    11b0:	f100001f 	cmp	x0, #0x0
    11b4:	fa401824 	ccmp	x1, #0x0, #0x4, ne	// ne = any
    11b8:	540000a0 	b.eq	11cc <nxsem_get_value+0x1c>  // b.none
    11bc:	b9400000 	ldr	w0, [x0]
    11c0:	b9000020 	str	w0, [x1]
    11c4:	52800000 	mov	w0, #0x0                   	// #0
    11c8:	d65f03c0 	ret
    11cc:	128002a0 	mov	w0, #0xffffffea            	// #-22
    11d0:	17fffffe 	b	11c8 <nxsem_get_value+0x18>

00000000000011d4 <sem_getvalue>:
sem_getvalue():
    11d4:	f81f0ffe 	str	x30, [sp, #-16]!
    11d8:	94000000 	bl	11b0 <nxsem_get_value>	11d8: R_AARCH64_CALL26	nxsem_get_value
    11dc:	340000a0 	cbz	w0, 11f0 <sem_getvalue+0x1c>
    11e0:	94000000 	bl	a8c <__errno>	11e0: R_AARCH64_CALL26	__errno
    11e4:	528002c1 	mov	w1, #0x16                  	// #22
    11e8:	b9000001 	str	w1, [x0]
    11ec:	12800000 	mov	w0, #0xffffffff            	// #-1
    11f0:	f84107fe 	ldr	x30, [sp], #16
    11f4:	d65f03c0 	ret

00000000000011f8 <fflush_unlocked>:
fflush_unlocked():
    11f8:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
    11fc:	b5000180 	cbnz	x0, 122c <fflush_unlocked+0x34>
    1200:	94000000 	bl	82c <lib_get_streams>	1200: R_AARCH64_CALL26	lib_get_streams
    1204:	94000000 	bl	1270 <lib_flushall_unlocked>	1204: R_AARCH64_CALL26	lib_flushall_unlocked
    1208:	2a0003f3 	mov	w19, w0
    120c:	52800000 	mov	w0, #0x0                   	// #0
    1210:	36f800b3 	tbz	w19, #31, 1224 <fflush_unlocked+0x2c>
    1214:	94000000 	bl	a8c <__errno>	1214: R_AARCH64_CALL26	__errno
    1218:	4b1303f3 	neg	w19, w19
    121c:	b9000013 	str	w19, [x0]
    1220:	12800000 	mov	w0, #0xffffffff            	// #-1
    1224:	a8c14ffe 	ldp	x30, x19, [sp], #16
    1228:	d65f03c0 	ret
    122c:	94000000 	bl	5d8 <lib_fflush_unlocked>	122c: R_AARCH64_CALL26	lib_fflush_unlocked
    1230:	17fffff6 	b	1208 <fflush_unlocked+0x10>

0000000000001234 <fflush>:
fflush():
    1234:	a9bf4ffe 	stp	x30, x19, [sp, #-16]!
    1238:	b5000180 	cbnz	x0, 1268 <fflush+0x34>
    123c:	94000000 	bl	82c <lib_get_streams>	123c: R_AARCH64_CALL26	lib_get_streams
    1240:	94000000 	bl	12e8 <lib_flushall>	1240: R_AARCH64_CALL26	lib_flushall
    1244:	2a0003f3 	mov	w19, w0
    1248:	52800000 	mov	w0, #0x0                   	// #0
    124c:	36f800b3 	tbz	w19, #31, 1260 <fflush+0x2c>
    1250:	94000000 	bl	a8c <__errno>	1250: R_AARCH64_CALL26	__errno
    1254:	4b1303f3 	neg	w19, w19
    1258:	b9000013 	str	w19, [x0]
    125c:	12800000 	mov	w0, #0xffffffff            	// #-1
    1260:	a8c14ffe 	ldp	x30, x19, [sp], #16
    1264:	d65f03c0 	ret
    1268:	94000000 	bl	688 <lib_fflush>	1268: R_AARCH64_CALL26	lib_fflush
    126c:	17fffff6 	b	1244 <fflush+0x10>

0000000000001270 <lib_flushall_unlocked>:
lib_flushall_unlocked():
    1270:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
    1274:	f9000bf4 	str	x20, [sp, #16]
    1278:	b4000340 	cbz	x0, 12e0 <lib_flushall_unlocked+0x70>
    127c:	aa0003f3 	mov	x19, x0
    1280:	91008000 	add	x0, x0, #0x20
    1284:	94000000 	bl	5d8 <lib_fflush_unlocked>	1284: R_AARCH64_CALL26	lib_fflush_unlocked
    1288:	52800014 	mov	w20, #0x0                   	// #0
    128c:	91038260 	add	x0, x19, #0xe0
    1290:	94000000 	bl	5d8 <lib_fflush_unlocked>	1290: R_AARCH64_CALL26	lib_fflush_unlocked
    1294:	91068260 	add	x0, x19, #0x1a0
    1298:	94000000 	bl	5d8 <lib_fflush_unlocked>	1298: R_AARCH64_CALL26	lib_fflush_unlocked
    129c:	f9413273 	ldr	x19, [x19, #608]
    12a0:	b50000b3 	cbnz	x19, 12b4 <lib_flushall_unlocked+0x44>
    12a4:	2a1403e0 	mov	w0, w20
    12a8:	f9400bf4 	ldr	x20, [sp, #16]
    12ac:	a8c24ffe 	ldp	x30, x19, [sp], #32
    12b0:	d65f03c0 	ret
    12b4:	79417260 	ldrh	w0, [x19, #184]
    12b8:	370800a0 	tbnz	w0, #1, 12cc <lib_flushall_unlocked+0x5c>
    12bc:	2a1403e1 	mov	w1, w20
    12c0:	f9400273 	ldr	x19, [x19]
    12c4:	2a0103f4 	mov	w20, w1
    12c8:	17fffff6 	b	12a0 <lib_flushall_unlocked+0x30>
    12cc:	aa1303e0 	mov	x0, x19
    12d0:	94000000 	bl	5d8 <lib_fflush_unlocked>	12d0: R_AARCH64_CALL26	lib_fflush_unlocked
    12d4:	2a0003e1 	mov	w1, w0
    12d8:	36ffff20 	tbz	w0, #31, 12bc <lib_flushall_unlocked+0x4c>
    12dc:	17fffff9 	b	12c0 <lib_flushall_unlocked+0x50>
    12e0:	52800014 	mov	w20, #0x0                   	// #0
    12e4:	17fffff0 	b	12a4 <lib_flushall_unlocked+0x34>

00000000000012e8 <lib_flushall>:
lib_flushall():
    12e8:	a9be4ffe 	stp	x30, x19, [sp, #-32]!
    12ec:	a90157f4 	stp	x20, x21, [sp, #16]
    12f0:	b40003a0 	cbz	x0, 1364 <lib_flushall+0x7c>
    12f4:	aa0003f3 	mov	x19, x0
    12f8:	94000000 	bl	b6c <nxmutex_lock>	12f8: R_AARCH64_CALL26	nxmutex_lock
    12fc:	91008260 	add	x0, x19, #0x20
    1300:	94000000 	bl	688 <lib_fflush>	1300: R_AARCH64_CALL26	lib_fflush
    1304:	91038260 	add	x0, x19, #0xe0
    1308:	94000000 	bl	688 <lib_fflush>	1308: R_AARCH64_CALL26	lib_fflush
    130c:	91068260 	add	x0, x19, #0x1a0
    1310:	94000000 	bl	688 <lib_fflush>	1310: R_AARCH64_CALL26	lib_fflush
    1314:	f9413274 	ldr	x20, [x19, #608]
    1318:	52800015 	mov	w21, #0x0                   	// #0
    131c:	b50000f4 	cbnz	x20, 1338 <lib_flushall+0x50>
    1320:	aa1303e0 	mov	x0, x19
    1324:	94000000 	bl	ce4 <nxmutex_unlock>	1324: R_AARCH64_CALL26	nxmutex_unlock
    1328:	2a1503e0 	mov	w0, w21
    132c:	a94157f4 	ldp	x20, x21, [sp, #16]
    1330:	a8c24ffe 	ldp	x30, x19, [sp], #32
    1334:	d65f03c0 	ret
    1338:	79417280 	ldrh	w0, [x20, #184]
    133c:	370800a0 	tbnz	w0, #1, 1350 <lib_flushall+0x68>
    1340:	2a1503e1 	mov	w1, w21
    1344:	f9400294 	ldr	x20, [x20]
    1348:	2a0103f5 	mov	w21, w1
    134c:	17fffff4 	b	131c <lib_flushall+0x34>
    1350:	aa1403e0 	mov	x0, x20
    1354:	94000000 	bl	688 <lib_fflush>	1354: R_AARCH64_CALL26	lib_fflush
    1358:	2a0003e1 	mov	w1, w0
    135c:	36ffff20 	tbz	w0, #31, 1340 <lib_flushall+0x58>
    1360:	17fffff9 	b	1344 <lib_flushall+0x5c>
    1364:	52800015 	mov	w21, #0x0                   	// #0
    1368:	17fffff0 	b	1328 <lib_flushall+0x40>

000000000000136c <__assert>:
__assert():
    136c:	d2800003 	mov	x3, #0x0                   	// #0
    1370:	f81f0ffe 	str	x30, [sp, #-16]!
    1374:	94000000 	bl	13ac <_assert>	1374: R_AARCH64_CALL26	_assert
    1378:	94000000 	bl	13a0 <abort>	1378: R_AARCH64_CALL26	abort

000000000000137c <pthread_exit>:
pthread_exit():
    137c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    1380:	d2800001 	mov	x1, #0x0                   	// #0
    1384:	910003fd 	mov	x29, sp
    1388:	f9000bf3 	str	x19, [sp, #16]
    138c:	aa0003f3 	mov	x19, x0
    1390:	52800020 	mov	w0, #0x1                   	// #1
    1394:	94000000 	bl	1054 <task_setcancelstate>	1394: R_AARCH64_CALL26	task_setcancelstate
    1398:	aa1303e0 	mov	x0, x19
    139c:	94000000 	bl	1440 <nx_pthread_exit>	139c: R_AARCH64_CALL26	nx_pthread_exit

00000000000013a0 <abort>:
abort():
    13a0:	f81f0ffe 	str	x30, [sp, #-16]!
    13a4:	52800020 	mov	w0, #0x1                   	// #1
    13a8:	94000000 	bl	13d4 <_exit>	13a8: R_AARCH64_CALL26	_exit

00000000000013ac <_assert>:
_assert():
    13ac:	aa0003e5 	mov	x5, x0
    13b0:	aa0303e4 	mov	x4, x3
    13b4:	d28000e0 	mov	x0, #0x7                   	// #7
    13b8:	aa0203e3 	mov	x3, x2
    13bc:	93407c22 	sxtw	x2, w1
    13c0:	aa0503e1 	mov	x1, x5
    13c4:	f81f0ffe 	str	x30, [sp, #-16]!
    13c8:	d4000001 	svc	#0x0
    13cc:	f84107fe 	ldr	x30, [sp], #16
    13d0:	d65f03c0 	ret

00000000000013d4 <_exit>:
_exit():
    13d4:	93407c01 	sxtw	x1, w0
    13d8:	d28000c0 	mov	x0, #0x6                   	// #6
    13dc:	f81f0ffe 	str	x30, [sp, #-16]!
    13e0:	d4000001 	svc	#0x0
    13e4:	14000000 	b	13e4 <_exit+0x10>

00000000000013e8 <clock_gettime>:
clock_gettime():
    13e8:	2a0003e3 	mov	w3, w0
    13ec:	aa0103e2 	mov	x2, x1
    13f0:	d2800620 	mov	x0, #0x31                  	// #49
    13f4:	f81f0ffe 	str	x30, [sp, #-16]!
    13f8:	93407c61 	sxtw	x1, w3
    13fc:	d4000001 	svc	#0x0
    1400:	f84107fe 	ldr	x30, [sp], #16
    1404:	d65f03c0 	ret

0000000000001408 <gettid>:
gettid():
    1408:	d2800120 	mov	x0, #0x9                   	// #9
    140c:	f81f0ffe 	str	x30, [sp, #-16]!
    1410:	d4000001 	svc	#0x0
    1414:	f84107fe 	ldr	x30, [sp], #16
    1418:	d65f03c0 	ret

000000000000141c <lseek>:
lseek():
    141c:	2a0003e4 	mov	w4, w0
    1420:	93407c43 	sxtw	x3, w2
    1424:	d2800980 	mov	x0, #0x4c                  	// #76
    1428:	93407c22 	sxtw	x2, w1
    142c:	93407c81 	sxtw	x1, w4
    1430:	f81f0ffe 	str	x30, [sp, #-16]!
    1434:	d4000001 	svc	#0x0
    1438:	f84107fe 	ldr	x30, [sp], #16
    143c:	d65f03c0 	ret

0000000000001440 <nx_pthread_exit>:
nx_pthread_exit():
    1440:	aa0003e1 	mov	x1, x0
    1444:	d2800e00 	mov	x0, #0x70                  	// #112
    1448:	f81f0ffe 	str	x30, [sp, #-16]!
    144c:	d4000001 	svc	#0x0
    1450:	14000000 	b	1450 <nx_pthread_exit+0x10>

0000000000001454 <nxsem_clockwait>:
nxsem_clockwait():
    1454:	aa0003e4 	mov	x4, x0
    1458:	aa0203e3 	mov	x3, x2
    145c:	d2800380 	mov	x0, #0x1c                  	// #28
    1460:	93407c22 	sxtw	x2, w1
    1464:	aa0403e1 	mov	x1, x4
    1468:	f81f0ffe 	str	x30, [sp, #-16]!
    146c:	d4000001 	svc	#0x0
    1470:	f84107fe 	ldr	x30, [sp], #16
    1474:	d65f03c0 	ret

0000000000001478 <nxsem_destroy>:
nxsem_destroy():
    1478:	aa0003e1 	mov	x1, x0
    147c:	d2800340 	mov	x0, #0x1a                  	// #26
    1480:	f81f0ffe 	str	x30, [sp, #-16]!
    1484:	d4000001 	svc	#0x0
    1488:	f84107fe 	ldr	x30, [sp], #16
    148c:	d65f03c0 	ret

0000000000001490 <nxsem_post>:
nxsem_post():
    1490:	aa0003e1 	mov	x1, x0
    1494:	d2800360 	mov	x0, #0x1b                  	// #27
    1498:	f81f0ffe 	str	x30, [sp, #-16]!
    149c:	d4000001 	svc	#0x0
    14a0:	f84107fe 	ldr	x30, [sp], #16
    14a4:	d65f03c0 	ret

00000000000014a8 <nxsem_trywait>:
nxsem_trywait():
    14a8:	aa0003e1 	mov	x1, x0
    14ac:	d28003c0 	mov	x0, #0x1e                  	// #30
    14b0:	f81f0ffe 	str	x30, [sp, #-16]!
    14b4:	d4000001 	svc	#0x0
    14b8:	f84107fe 	ldr	x30, [sp], #16
    14bc:	d65f03c0 	ret

00000000000014c0 <nxsem_wait>:
nxsem_wait():
    14c0:	aa0003e1 	mov	x1, x0
    14c4:	d28003e0 	mov	x0, #0x1f                  	// #31
    14c8:	f81f0ffe 	str	x30, [sp, #-16]!
    14cc:	d4000001 	svc	#0x0
    14d0:	f84107fe 	ldr	x30, [sp], #16
    14d4:	d65f03c0 	ret

00000000000014d8 <write>:
write():
    14d8:	2a0003e4 	mov	w4, w0
    14dc:	aa0203e3 	mov	x3, x2
    14e0:	d28007c0 	mov	x0, #0x3e                  	// #62
    14e4:	aa0103e2 	mov	x2, x1
    14e8:	93407c81 	sxtw	x1, w4
    14ec:	f81f0ffe 	str	x30, [sp, #-16]!
    14f0:	d4000001 	svc	#0x0
    14f4:	f84107fe 	ldr	x30, [sp], #16
    14f8:	d65f03c0 	ret
